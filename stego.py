import base64
exec(base64.b64decode("import base64
exec(base64.b64decode("aW1wb3J0IGJhc2U2NApleGVjKGJhc2U2NC5iNjRkZWNvZGUoImFXMXdiM0owSUdKaGMyVTJOQXBsZUdWaktHSmhjMlUyTkM1aU5qUmtaV052WkdVb0ltRlhNWGRpTTBvd1NVZEthR015VlRKT1FYQnNaVWRXYWt0SFNtaGpNbFV5VGtNMWFVNXFVbXRhVjA1MldrZFZiMGx0UmxoTldHUnBUVEJ2ZDFOVlpFdGhSMDE1VmxSS1QxRllRbk5hVldSWFlXdDBTRk50YUdwTmJGVjVWR3ROTVdGVk5YRlZiWFJoVmpBMU1sZHJaRlppTUd4MFVteG9UbGRIVW5CVVZFSjJaREZPVmxwRmRHaFNNREUxVm14U1MxUXhSbGxSYms1aFZsZFNXRmxYZERCVFJrNTBZVWR3VG1KR1ZqVldSM1JPVFZkR1ZrNVlSbFppV0ZKb1ZtcEJNVTFzWkhKYVJscHBUVWQ0TUZWdGVHOVViR1JJVlc1Q1ZWWkZTakphUkVaUFZteHdSbVJIYUZOTlJFVXhWbTE0VTFNeFVYaFNiR3hTWW1zMWFGWnNaRk5YUm14WVpFUkNWRkpyTlRCWlZXUjNWRzFLUjFacVZsZFNNMUpQVkZaa1IxWnJOVmxTYkZwcFYwWktiMVp0Y0VKTlZURnpXa2hLWVZKc2NIQlVWV1EwVFVaV2RHVkhPVlZpUjFKSlZsYzFRMVpXV2taVGFrcGhVa1ZhVUZadGVIZFNiVkpJWVVaT1RsSkZWWGhXYlRFMFZURk5lRlZZYUZOaVIzaFRXVzF6TVdGR1duTmFSazVZVW0xNFdWcEZVa05XUmtweVRsUkNXbFpYVWpOV1J6RkxVakZhY1Zac1pGTk5NVXBRVmtaYWExSXhXbkpPVm14VFlrWndjRll3V2t0aU1WcDBZMFZLVGxaVVJucFhhMmhMV1ZaS2MyTklRbFZXVjFFd1ZGVmFWMlJIVmtoUFZsWnBVakZLU2xac1l6RlJNVnBYVjJ0YVZHRnJjR2hWYTFaaFZVWmFkR1ZJWkZOaVZrcEpXVlZhVDFSc1NrWldXR2hYWWxSRk1GWlVSazVsUmxaWllVWk9hVkl6YUZSWFZ6RjZUVmRHUjFkdVRtRlNhelZaVlcweE5GZFdjRVpWYTA1WFVtdHdlVlJzVWtOWGJGcFlWV3BPVjFKNlJreFZha1poWTFaYWMxcEdUazVOVlhCUlZtdGFZV0V4U1hoWGJrcFBWbTE0VkZsclduZGpSbGwzVjJ0MGFVMVdjREJaTUZaTFZHeGFWVkp1Y0ZoaE1taE1WMVphUzJNeVRrbFJiRlpYVmpGRmQxWkdWbUZXTWxKSVZtdG9VRlpzV25CVmFrWkxVMnhhYzFsNlJsSk5WbkJZVmpKMFlWWkhSbkpqUjJoV1lURmFhRlpWV21Ga1JURldXa1pPYUdWdGVGaFdSRVpoWVRGU2MxTnJaRlJXUlhCWVZGWmFTMUpHYkhGU2ExcHNWbXR3ZWxkclpFZFZNVnAxVVd4YVdGWnRVWGRhUkVaelZqRldjMkZIY0ZOaVZrcFlWa1phYTFVeVZrZFdXR3hyVTBkU2NGVnFRbmRUUmxWNVpVZDBXbFpyY0ZoV01uaFRWMnhhYzJOSGFHRlNiSEJJV1RGYVUyTXlSa2RhUlRWT1ZsaEJNVlp0TUhoa01VbDVWVmhzVlZkSGVGWlpWRXBUWWpGV2MxVnVUbGhTYkVwV1ZXMTBNRlpXU25OalJteGhVbFp3VUZaWGMzaGpiVTVKWTBad1RsSnVRalpXTVZwaFZERkplVlJyYUdoU2JGcFlWbXBHUm1ReFdsaGxSMFpYVFZac05Ga3dWbTloTVVwelUyNUNWMkpHY0ROV2FrWmhaRVV4V1ZwR1ZrNVdNVWwzVmxSS05GWXhWWGxUYmtwWVlsVmFXRmxzYUc5V01WSlhWMjVLYTAxWFVubFhhMlF3VlRBeFNWRnJhRmhoTVZwWFZGWmFhMUl4VGxsaVJsWm9ZWHBXV1ZkV1VrZGtNV1JIVjJ4V1UyRXhjSE5WYWtKWFRteHNjbGR0ZEdoU1ZFWllXVEJhVTFZeVJuSlRia3BYVmtWYWNsbDZSbUZYVm5CSVVteE9UazFWY0ZGV2ExcGhXVlpOZUZkWWFGaFhSM2h4Vlcxek1WWnNVbGRXYm1SWFlrWmFNRnBGWkVkV01rcEhZbnBLVm1KWWFFUldNakZHWlVkT1JtVkdXbWhoTVhCTlZtMTRZVk15VFhsU2EyUlZZa2RTVDFsc1pHdE9SbHAwWkVkR1YwMVdjSGxVVmxwclYwWmtTR1ZHYUZwV1JWcG9WbXBHYzFkWFRrbFViR1JUWWtWd1dWWnFTVEZoTWtaelYyNVNWbUp1UWxoWmJHaHZWVVphZEUxVlpFOWlSWEI1V1ZWYWQxWXhXbk5qUkZwWVZteGFhRlV5TVZkWFJrcHlZVWRvVTJKV1NuZFdiWFJoV1ZVeFYxZHJaRmRpVlZwWFZGZHpNV1ZzV25ST1ZYUm9UVlZ3TVZWWGN6VlhiVVY0WTBST1ZtRnJXbWhaTVZwTFpFVTVXR0ZGTlZkTlZYQmFWbTEwYTAxSFNYaGFTRkpYWW10d1ZWbHJXbmRYUm14WVpFaGFUbEp0ZERSV01qVlBWREpLUmxkdWJGVk5WMUl6VmxSS1JtVkhUa2RqUm1ST1lteEtXVmRyVWtkV01rNXlUVlphV0dKSGFIQlpiRnBMVjFaYVdHVkhkRlZOUkZaSVdUQldWMVpIU2taalNFNVdZV3RGZUZWdGVHRmtSMVpIVkd4a1RsWllRWGhXVm1Rd1RrWlplRmRZY0ZKaE1VcGhXbGQwZDFaR1duRlNibVJUWWtkU01GbFZXazlpUjBwWllVUk9WMkpVUWpOVVZscEdaVlphZFZSdGNGTmlTRUpZVjFkMFZrMVdiRmRYYmxKclUwZFNWVlp0TlVOU01XeFdWMjEwVjJKVldUSlZiVFZ2VmpGWmVsRnNRbGRpVkVaWVdUSjRUMk14Um5SU2JFNVhZbXRLV2xZeWRGZGhNVmw0Vkd0a1ZHSnNTbTlWYlRGVFYwWlpkMVpyY0d4V2JIQjRWVzE0VDFWck1YSmlSRkpXWWtkb2VsWnJaRVpsVjBaSFZteHdhVmRIYUUxV2JYQkhZekpOZUZwSVZtRlNNMEpZV1d0V2QxZHNaSE5XYlhSVFRXdGFlbFl5TlZOaE1VcEhWMnhhVjJKWWFETlpNbmhoVTBkV1JtUkdhRmRpUm5BMVYxZDBZV0V4VW5SU2JrNVlZVEZhV1ZadGVIZGhSbFY1VFZaa1UwMVlRa3BWYlhoUFlWWkplV0ZHYkZoV00yaFhWRlZWZUZJeGNFZGhSM1JUWWxaS1VWWlhNVEJrTVU1SFZtNVNUMVpyTlZaWmExcHpUbFpzVmxkdE9WZFdiSEJIV1RCb1lWbFdXWHBoUjBaaFVrVmFXRmt5TVZOU01YQkdUbFpPVTJKSVFreFdiVEUwWVRBeFNGTllhRmhYUjNoVldXMXpNVmRXYkhSa1IwWlhZa1p3TVZrd1ZtRlViRXB6VTJ4c1lWWlhhRkJaVkVaS1pESk9SbGRzWkZObGExcEpWbXRqZUZJd05YTlRiRlpUWWtkU2NGWnJWa3BOUm1SeVZXdDBVMDFzU2toV1J6VlBXVlpLZEdGR2JGWmhhMXBNVm0xNFlWSXhaSFJTYkZKT1VrVmFObFp0TVhkWlZsWjBVMjVLVDFac1NsZFpiR2hUWVVaWmVGZHRkR3BpUm5BeFYydGFhMVV5Ulhsa2VrSlhWa1Z3TTFaRVJtdFRSa3BaWVVab2FXRXpRbWhYVjNodllqQXhjMk5HWkZoaGVteFpWbXBCTVZOR1ZYbE5XRTVZVW10c05WbFZVazlXTURGWFkwZG9XbFpGY0V0YVZscFhZMnh3UjFadGJGTk5iV2hTVm0weE1GWXhUWGxVYTJSWVltdGFVMWxzVm1GWFZscDBUbFZPVjAxWFVubFdWM2hQWVVaS2MySkVUbHBOUm5CeVZtcEJlR1JXUm5KVmJHUk9VakZLVFZaVVFtRmtNVXBYVm01T1YySlhhRzlVVm1NMVRteFplV1JHWkdoTlZURTBWa2Q0YTFadFNuTlRiRkphWVRKU1ZGbHFSbk5qTWtaSVQxVTVhVkp0ZHpGWGJGWmhZVEpHVmsxV1pGZGhiRnBYVkZjMVUyUnNXbkphUlhScVRWZFNlbFl5ZUhkaFZtUkhVMnN4V0ZaRlNtaFdWRVpyVTBaU2NscEdhR2hsYlhoWlYxWm9kMVl4WkhOYVJtaHJVbXMxVmxSV1pEUldNVkpYVm0wNWFWSnJjRWRWTW5oclYyMUtSMU5yYUdGV00yaFhXbFpWZUZac2NFZGhSazVPVmxoQ1MxWnJaRFJaVjBsNFYxaHNWR0pIYUc5VmJYUkxWMFpTV0U1VlRsUlNia0pHVlRKek5WZEdTbkpPVm5CWVlUSlJkMVpVUm10U2JFNXpWV3hrVTJKR2NGbFdNVnByVlRGWmVGZHNiR2hTYlZKdldsY3hORlpHWkZoa1IzQlBWbFJDTkZscmFFdFdNa3BHVGxaa1dtSkdXak5XYlhoWFpFZE9ObEpzYUdsV1dFSlhWbGN4TkZVeFdsaFRhMlJxVTBoQ1dGbFhkSGRUUmxaeFVteE9hMUl3Y0VoV1IzaHZWVEpGZWxGcmVGZGlXR2hVVlhwS1VtVkdaRmxpUms1WVVqSm9WbFpxUW10aU1XUlhZa1pvYkZOSFVsaFdiWGhMVmpGa2NsbDZWbGRpUlhBd1dsVm9jMVl3TVhGV2EzaGFZVEpTVEZWdGN6RldWa1owVW14a1YwMVZXWHBXYlhoclpXMVJlVlpzWkZkaWJGcFlXV3RrVTFReGJIUk5WemxzVW14d1NGWXlNVEJWTURGelUydG9WMUl6YUhwWlZscExZekpPU1ZGc2NGZFNWVzk2VjJ0U1IyRXhaRWhXYTJoclVteGFiMXBYZUdGWFZscHlXa1JTYVUxV1JqUldNalZUVm0xR05tSkdaRnBpUmtwWVZXdGFkMUpXU25OVWJHUnBVbXh3TmxaclpEUlZNa1pYVjJ4a2FsSnVRbGxaVkVaaFpHeHNWVkpzWkdwaGVrWmFWbGQ0WVdGSFJqWldiV2hYWWxoU1dGZFdWWGRsUm1SWldrWm9hVmRHU2xwV1Z6QXhVVEZPVjJFelpHRlRSVFZZVkZkMGQxTldjRVZVYm1SWFRVUkdXRlV5ZERCWlZscFlWV3M1WVZac2NGQlpNakZIVWpGa2RHSkhiRk5YUlVwaFZtcEdhMDVHYkZoVldHeFZZa2RTVjFsclpHOWpNVlp4VVcxR2FsWnNjREJVVmxKRFZERmFjMU5zYUZkTmFrVjNWbXhrUzFKdFRrZGpSbVJYVFRGS05sWnRjRUpsUjA1WFYyNUtWbUpJUWxoWmEyaERWRVprYzFadFJtaE5helZZVlRJMVQyRkdTblJWYmtKWFlrWktVMXBFUmxwbFJuQkZVV3hrVGxKR1drbFdWRW93WVRGVmVWTnVUbFJoZW14WVdWZDBkMlJzV1hkWGJFNVhWbXMxTUZReFpEUmhWa3AwWkROd1YySkhVWGRVVlZwYVpEQXhWbFpzWkdoTmJtaFpWbTF3VDFVeVVuTlhia1pVWVROU2NWUldaRk5OVmxaMFpVWmtWMDFzV25sV2JHaHJWakZLZEZWVVFscGxhM0JVVlRCYVQyTnRTa2RWYldoc1lsaG9NbFpyV2xkVk1WbDNUVWhvV0dKSFVsbFpiR2hUWWpGU1YxWlVSbXhpUmxwNldWVmtNRll4U25SVmEzQldWbnBHU0ZacVNrdFdWa3AxVjJ4a2FFMVlRalpYVkVaaFVqSlNWMVZ1VGxaaVJUVllWV3BPYjJGR1duRlRha0pvVFZWc05GWXhhSE5XTWtweVRsWldXbFl6VWpOV01GcFRWMGRPUmxwSGVHbFNiR3Q1VmxaYVUxRXlTa2RUV0dSUFZsaENXRlp1Y0VkbGJGcHlWMnQwVjFac2NEQlVNVnByWVZaYVIxZFljRmRpV0VKTVZUSXhWMU5HVG5KaVJsWnBWbFp3VlZkWGVHRlRNVlp6VjI1U2FsSlhVbGhVVlZKWFYwWlplR0ZJVGxWTlZuQlhWR3hqTlZZeVNsbFZibkJWWVRGd1lWcFdWWGhUVjBaSFlVWk9UbE5GU2t0V01WcFhZakZzVjFkc1pGaGlSMUp4Vld0Vk1WZEdVbFpYYkZwc1VteHNORmRyVlRWV1JrbDNWMnRvV0dFeVVUQlpWbHByVTBaV1ZWRnNaR2hoTW5jd1ZrZDBZVlZ0VmtkVmJsWldZa1phV1ZWcVJrdGtNVnBZWlVkR1ZFMXJXa2hXYkdocldWWktSMU50UmxkaVZFVXdWakJhYTJOc1dsVldiV2hPVWtWYVdGWkhlR0ZoTVdSSVVsaG9XR0pyY0dGWlZFcFRVakZ3VjFwR1pGTmlWWEJJVjJ0Vk1WWXlSWHBSYmxwWFlrZFJkMWxVUmtwbFJtUjFWR3hTYVdKRmNGRldiVEUwVXpGa1IxZHVUbFppUjFKVVZXMTRjMDVXYTNkV2F6bG9ZWHBHVjFrd1ZtOVdiVXBaWVVoYVdGWnNjRXhhUmxwSFpGWkdjMk5IYUU1WFJVWTJWbXRhVjFsV1pIUldiRnBPVm0xNFZsbHJWbmRpTVhCWVRWUlNXRkp0VWxsYVJWcHJZVlV4VjJORmJGWmlWRlpRVmpCa1MyTnRUa2RhUm5CWFRURktiMWRXVm1GVk1sSklWbXRhVDFZelVrOVdNRlpMVTFaa1ZWRnRkRTVTYkd3elZGWldWMVl4WkVoVmJHaGFZa1pLUkZSclduTmpWa3AxVkd4a1RsWllRbUZYVjNSclVqRmFSMU5ZYUZSaVJuQllWVzE0ZDFkR1pGZFdXR2hxVFZoQ1NsVnRlRXRoVjBZMlZteFdWMVo2UlhkWFZscHJWakZ3U1ZOc1pHbGlWa3BZVjFab2QxSXhTWGhYV0d4UFZtMVNXRmxZY0VkWFJsbDVUbFYwV0dKV1dubFpNRnBUVmpKR2NtTkdRbFppVkVaSVZXcEdkMU5IUmtoaVJrNVlVbFZ3VDFadE1UUmhNREZIVmxob1UxZEhlRlZaYlhNeFlVWldkRTFYT1ZaU2JIQXdWRlphVDJGc1NuTmpSRUpWWWtaYVVGbFVRWGhXTVU1MVkwWndWMVpzY0ZGWFZsWmhWMjFSZVZSclpHaFNiSEJQV1ZkNFlWVldXWGhYYlVaYVZteHdlVlJzV25OWFIwcEpVVzVDVm1GcldreFZNVnBoWTFaR2RHUkdaRTVXVkZaS1ZtMHhNR0V5UmxkVGJGWlhZbXRLVjFsc1VrSk5WbEp5VjIxR2FsWnJOWGhWVjNoM1ZqRmFSbGRyY0ZkV1JXOHdXV3BHVm1WV1RuSmhSMmhVVWxSV1dGZFdaSHBOVjFKelYxaHNiRkpyTlZsVmFrWmhVMFpyZDFaVVJsWk5hM0I1VlRKMGIxWXdNWFZWYldoYVZrVndSMXBWV210WFZuQkdUbFprVTJKSVFtOVdNVnBUVXpKSmVWSnJaR2xTYlZKb1ZXeG9VMVpHV25Sa1IwWk9WbTFTZVZZeWREQldWMHBXWTBad1dsWldXbFJXYWtGNFpGWkdjbFZzY0d4aE1YQk5WbGR3UjFNeVRYbFNhMmhUWWtVMVdWVnNWbmRXVmxweVYyeGtWMDFYZUZsV1YzaHJXVlpLYzFkc1ZsZE5SMUoyVmpCYVUxWnNWbkphUmxKWFlraENXbGRzVm05VU1WbDRVMWhrYWxOSVFsaFVWelZTWkRGYWRFMVZaR3BpUlRWNFZUSXhSMVl4V25WUmJteFlZVEZhVjFwVldtdFNNVTUxVkcxd1UwMXVhRmxXYlRBeFVURnNWMWR1U21GU1JrcHZWRlZTUjFOR2JISlhiWFJhVm10d1dWbFZaRzlXYXpGSVZWUkNXRlpzY0hwV2JGcFBZekZTYzJGR1RtbGhNSEJLVm0wd2VHUXhSWGhYYTJSVVlteEtWMWxYZEdGV01WcDFZMFZrYkdKR2NGWlZWbWh2VmpBeGNrNVZjRmRXTTJoeVZrY3hTMlJIUmtsaFJtUlRZa2hDZVZaWE1IaFdNVWw1VWxod2FsSXllRlJaYkdSdlpERmtWMVZyVG10TmJFWTBWako0YjJGc1NsaFZiVVpYWVd0S00xWXdXbXRqYlVaR1QxZG9VMkV5T0hsWFYzUldUbFphZEZOc1ZsZGhNVXBZVkZaYWQxWkdiRFpUYTJSVVZtNUNTVmxWV2s5aFZrbzJZVVJXVjAxWFVYZFdWRVpLWlVad1JscEdVbWxoTTBKUlZtcENhMDVHV25OaVNFNW9VbnBzY2xsclduZGxWbHB6Vld0a1dGSnJiRFJWTW5SelZtMUtXV0ZJU2xkU00yaE1WV3BHWVdOV1duTmFSMmhvVFdwcmVsWXhXbE5TTVd4WVZXdGtWV0pIZUdoVmFrbzBWREZTVlZGcmRGaFdiVkpZVjJ0U1ExWkZNWEpYYTJoYVlURndjbFp0TVVaa01rNUdUMVphYVZkRk1UUldSbHBoWXpKT2RGSnJXbXRTYlZKVVZtdFdZVk5HV2tobFJrNVNUVlpzTkZZeWNHRlZNVnBHVTJ4c1YySlVSbFJWTUZwaFpFZFdSazlYZEZkaE0wSTJWMVJDYTJJeFVuUlRhMXBxVW01Q1dGUldXbmRYUm14VlVteEtiRlpzU2xwWGExcERWakpLV1dGSWFGZFdNMEpFVjFaYWExSXhWbk5YYkZwcFVtNUNVRlp0TVRSak1EVlhZMFphV21Wc1dsaFpiRlozVmpGc2NsVnNUbGhoZWtaSldWVmFVMWRzV25OalJrSldZbGhOZUZZd1pFZFNNWEJJWWtkc2FFMUlRbUZXYWtaclpERkplVlJZYkZWWFIyaHhWV3hrVTFkV2JITmhSVTVWVFZaYWVGWkhNRFZXUjBwSFkwaG9WazFXU2toV1YzTjRZMnhrYzJGR1drNVdNbWd5Vm1wQ2ExTXhXbGRUYms1cFVtNUNiMVJYZUV0TmJHUnlXa1JTVmsxV2NIcFhhMmhYV1ZaS2RHRkdVbGRoTVhCb1YxWmFhMVpXUm5Sa1IyeE9WbTEzTVZadE1ERlZNa1YzVFVoc2FGSnRVbWhXYWs1VFlVWmFjbGR1WkZSU01WcEhWR3hrTUZSdFJYcFJhMmhYWWtkUk1GVjZSbHBrTURGWlZHeFNhRTB5YUZsV2JYUlhVekpPYzFkc1ZsUmlSWEJ6VldwQk1WSXhXWGxOVldSV1RXeGFlbFl5TURWV01VcDBWVmhrV21WclJYaFpla1poWXpKR1JrNVdaRk5oTTBJeVZtMHhkMUV4YkZkYVJtUnBVbXh3YjFWdGN6RlhSbFowWlVoYVRtSkdjSHBaVldRd1YwZEtWbU5GYkZkV00xSjJWbXBCZUZOR1ZuTmhSbHBPVWpGS1dWWlVRbXRUTVU1SVUydGtZVkp0VW5CV2EyUXdUbXhhZEUxWVpGUk5SRlpKVlRJMVUxWXlSWGhqUmtKV1RVZFNkbGt4V2xaa01XUnlaRWR3VTJKR1dYcFdiWGhUVWpKR1IxTnVUbXBTUlVwaFZGVmtiMVZHYkZoak0yaFlWbXRhZWxkclduZFdNVnAxVVd4R1dGWnNjR2hWTWpGU1pWWlNjbFpzVG1sU01VcFZWMnhrTkZsV1NsZGFSbVJZWWtad2MxVnFRVEZYUmxsNVpVWmtWMDFyY0VoVk1uaHZWbFphTmxadVNsVmlXR2hoV2xaa1QxSnNVblJrUjJ4WFlraEJNbFp0ZEdwTlZsVjVVbXhrVkdKSGVHOVZNRlV4VjBac1dHUkZXbXhTYkVwV1ZXMTRZV0pHU25OalJFSmhVbFp3VUZaSE1VdFNNazVGVm14b1YwMHhTbGxYVjNCSFlURkplRnBJU21GU00wSlVWbTE0ZDJGR1duUk5WRkphVm1zMVNGbHJhRk5pUmtwVllrWm9XbUV4Y0V4YVZscFdaVlV4VmxwR1ZtbFNWM2N5VjFaV1YxbFdXWGhYYms1cVUwVndZVlpyVm1GamJIQkdWMnM1YTFac1NucFpWV1J6WVZaS1dWRnRSbGROVjFFd1dWUkJNVkl4U2xsaFJscFlVakpvV1ZkWE1YcE5WbHBYVm01U2FtVnJXbk5WYlhoM1RVWlNWMVZyVGxkaGVrWkdWVzE0YjFkdFNuVlJhM2hYWWxSR1dGa3llRTlrVms1eldrVTFhR0V4Y0ZaV2JYQkRXVlpWZVZWc1pGZGlhelZvVldwS05GZEdVbGhOVnpscllrWndlbFl5ZUU5V1JURnlWbXBXVjFadGFIWldiRnByVTBkR1IxVnNjR2xYUjJkNlYxWldZVlV4V25OalJWWldZa1UxV0ZsclduZFhWbGw1WkVkMFRsSnNjRWxWTW5SaFZqSkdjazVXWkZwaVJrcERXbFZhWVdOc1pIUlNiR2hUWWtadmVGZFVRbXRTTVZWNVUydHNVbGRJUWxoV2ExWkxZVVprVjFwRk9WZE5WbkF4VlRJeGQxVXlSalpXYkZaWFZqTm9XRnBFUVhoV01XUjFVbXhPYVZkRlNsQldiVEUwWXpBMVYxWlliR3hTTTFKdldXdFZNVkl4VlhsbFJVNVhUVVJHU0ZZeWREUlhhekZIWTBod1dtVnJXbkpaTWpGVFUwZE9SazVXYUZOV1dFSmFWbTB4TUdGdFVYZE9WbWhUWWtkU1dWWXdaRk5YVm14eVdrUlNhRkpzY0hwWGExcExWR3hLYzJKRVVsZGlSMmgyV1ZkemVGZEdWblZoUmxwcFYwZG9NbGRXVmxabFJtUkdUMVpXVldKSGFGaFVWRXB2WlZaYVdHTkZaR2hOVlRWSVZqSTFTMkZHU1hwaFJsSmFZa2RvZGxaVldtdFhSMUpJVW0xd2FWWnJXVEJXTW5SdlV6RlplVk5zYkZaaVIyaFdWbXBPYjFSR1dYaFhiVVpUVFd0YVNsWkhNVzlXTWtZMlZtdHNXRlpGU25aVlZFWnJaRVpLV1dGR1VtaE5WWEJ2VmxkMFYxbFdTWGhqUm1SaFVsaFNWRmxyVlRGTlJsWjBZM3BHVmsxRVFqVlpWVlpyVmpKS1IyTkhhRnBXUlhCSFdsVmFVMlJXVW5OVWJHaFRUVlZ3VmxZeFpEUlZNVmw0V2taa2FWTkZOV2hWTUdoRFl6RldkR1ZGZEZkTlYxSjVWbXhTVjJGRk1WZGpTSEJhVFVaS1NGWnFTa3RYVjBaRlZHeGtVMlZyV2toWGJGWnJVekZLVjFWdVRtRlNWRlp3V1d4a2IxVnNXWGhhU0dSVVRWWkdORlpIZEd0V1YwcHpWMnhrV21FeGNETlpNRnBhWkRGd1NFOVhlR2xTYmtKWlZteGtlazVXV25KTldFNVlZbTVDV1ZsVVNtOVZSbGw1VFZaa2FtSkZOVEZWVjNoWFZqSktXR0ZGVmxkU2JGcG9XWHBLVDJSR1NuSlhiRUpYWW10S1dWZFhkRzlSTURWSFdrWm9hMUo2YkZaVVZtUlRUVVpWZVdWR1pGWk5hM0JJVlRKNGMxWXlSbkpPV0ZwVlZrVmFNMVZ0ZUhkU2JWSkhWV3hrYVZKWE9UTldiR040VGtkRmVWSnJhRlJpUjNodlZXdGFkMWRHVWxoT1Z6bFlVbTE0ZUZWdGVHRmlSbHB5VGxoc1dsWldjRlJaVm1STFVqSk9SMXBHYUZkbGExWXpWbGh3UzFReFNYaFdiazVvVWpOQ1ZGbHNXa3RrYkZwSFYyeGFiRkpVVmtoV01uUnZWREZhV1ZWc2FGWmlSa3BJVldwR1UyTXhWbkpVYkdST1ZtMDRlVlpYZUZOUk1XUkhWMjVTVm1FeWFGaFpiR2h2VlVad1IxZHRkR3BOYTFwSldXdGFUMVJzV2xkWFdIQlhZV3R2ZDFaVVJrWmtNREZXV2taU2FFMXRhRlZYVm1RMFpERmtWMkpHVmxOaE0xSndWRlphZDJWc1duUk5WV1JvVFZad2VsWnRjRk5XTWtwWlZGUkdWMVl6VGpSWmVrWkxZMVphYzFwR1RteGlSbkJXVmpGYVlWbFdVWGhUV0doaFUwWmFWVmxyV25kWFJsWnpZVVZPYkZadFVsWlZWekZIVmxVeFdGVnJiRlpOYmxKb1dWZDRTMk14VG5KUFZtUm9ZVE5DTWxaWGNFZFpWbGw0V2toU1VGWXpVazlXYlhSM1RsWmFSMWR0Um1wTlZuQlpWVzAxVDFaSFNrZGpSbHBYWVRGVmVGVnJXbUZTVmtwMVdrWmtUbGRGU2toWGExWmhXVmRHVjFkc2FHdGxhMXBZVkZjMVUxZEdjRVZTYkdScVlYcEdWMVl5ZUc5aFYwcEhZMFpvVjFKc2NHaFhWbHBYVWpGYWMyRkhlRlJTYmtKNVZrWmtNR1F4U1hoYVNFcFlZVEExVjFSVlVrZGxiRlY1WkVSU1YwMVdjSHBWTW5SVFZtMUdjbU5GZUZwbGExcFVXWHBHYTJNeFduUmhSVFZVVWxWd01sWnRkR0ZXTWtWM1RsVmtWR0pIVWxoWmEyUlRZVVpXY1ZSc1RsaFdiSEI0VlcweFIxWXdNVmRYYWtKVlZsWktTRlpxUmt0ak1rNUhXa1pXYVZKc2NGRldha0pyVWpKT2MxUnVWbXBTYkhCdlZGWm9RMU5XV25GUmJVWnJUVlZ3TUZaSGRHdFdSMFkyVm14U1YySlVWa05hVlZwaFl6RldjbHBHWkU1V01VbzFWa2Q0VjJFeVJsWk5TR3hXWW10S1YxbHJXbmRVUmxwVlVtMUdhbFpyTlhwV1IzaFRWR3hhYzJOR1pGZFdiVkYzV1ZSS1IxZEdUbkpYYXpsWFlsWktXVlpYY0U5Vk1WSkhXa1prVjFkSGFGVlZha1poVWpGYWRHVkhSbGROYkZwNVZqSXdOVll4V2taaWVrSldZbFJHVTFwVldrOWtWbFp5VDFaa2FWSllRbHBXYlRFMFZURlplRk5yWkZoWFIzaHhWV3hWTVdOV1VsZFdibVJVVW14YU1GcFZZelZYYkZweVkwWndWbFl6YUZCV2JGcGhWakZrZEdGSFJsTmlTRUpZVjJ4V1lWbFhUbkpQVm1SVVlYcFdXVlZzVm5aTlZsbDRXa1JDVjAxV1ZqUldiVFZQVjBaa1NHVkdaRnBXUlRWVVZtcEdZV05zV25Ka1JsSlRZbGhuZDFkc1ZsWk9WbGw1VTJ0YWFsSkZXbGhVVjNCSFUwWmFTR1ZGY0d4aVZWcEhWako0YTFZeVNrbFJibXhZVm14S1NGWkVTazVsUms1ellrZEdVMkY2Vm5kV2JYUmhXVlpaZUZkc1ZsSmlXRkpRVlcxMFYwNUdhM2RXYlRscFVtdHZNbGxyV2xOV2JVcFpWVzFvVjAxV2NISlpNbmhoWkZad1IxZHRhR3hoTVhCSlZtMXdTazFXV1hoWGJrcE9WbTFTV1ZsclZrdFdNVnAxWTBWa1YxSnRkekpWTW5SclZUSktSMWR1Y0ZaTmFrWjZWbXBHWVZJeFpISk5WbVJwVW01Q1ZWWldVa2RUYlZaWFZHNVdWV0pHV25CVmJUVkRWakZrVjFWclRtdE5hMXBJVmxkNFlWbFdTa2RUYkZKWFlsaG9hRll3V210amJIQkZVV3hrVjJKSVFsZFdWekUwWkRGa1NGSlliRlZYUjJoWVZGVmFkMVJHV25SamVrWlhZa1pLZWxsVlpHOWhSVEZKVVZSS1YySkhVWGRYVmxwS1pVWndSbHBIY0ZOV2JrSjRWbGN4TUdReFVYaFdiazVZWW0xU1QxWnRlSGRXYkZaMFpVZDBWMVl3V1RKV2JYaHZWMnhhUms1WVNscFdiSEJNVmpCYVYyUldUbk5XYkdSc1lURndWbFpzYUhkU01WbDRWMnhrVTJKcmNHaFZha28wWTBaV2MxVnNaRmhTYkhCNVYydFNRMVpGTVZobFJtUlZWbXhhZGxscldrdFdNV1J6V2taa2FWWkZXbFZYVkVvMFZtMVdXRlpyV21GU1ZHeHdWbXhvUTFOc1pGVlJiVVpXVFZac05GWXlOVk5WUmxwSFkwWm9WVlo2VmtSVmExcHpUbXhLY21SR1RrNVdXRUkyVjFaV2ExSXhWWGhhUlZwVVlrWktXRmxzVWxkTk1XdzJVMnhPVjAxV2NGcFpWVnByWVVkV2RHVkdVbGhXTTFKeFZHeFZkMlZIU2tsVGJHUnBVbFJXV0ZkWGRHdFZNVTVIWVROa1YyRnJTbGhaYTJSVFUyeFdXRTVYUmxoaVZYQmFXVlZhUTFZeVNsbGhTRXBhVFZad1ZGcEZXa3RqYXpWWFZHczFUbUpYYUVsV2JURTBXVlpzV0ZKWWJGTlhSMmhXV1cxek1WWkdXWGRhUms1WFZtMTRlbGxWVms5WFJscHpWMjVzVjJKWWFETlphMlJMVTBaV2RXRkdXbWxXUlVWNFZteFNSMU15VG5OYVNFNXBVbTFvYjFSV1duWmxiRnB6V2tod2JGSnJjSHBYYTJoWFZqSktSMk5GT1ZkaVdHZ3pWbFphWVZZeGEzcGhSbHBPWVhwVmQxWlVTakJaVmxwMFUydGFhbE5GU2xoWmExcExWMFphUmxkdFJsaFNWRVpHVlcweGIxUnRSWHBSYWxwWFlUSlJNRmRXV21GWFJrcFpXa2R3VTAxdGFGZFdiWGhyVldzeFIxWnVUbGhpUjFKWVZGWm9RMU5XY0VaWGJHUlhUVVJHV0Zrd1dtOVdNVm8yVVdwT1ZWWnNjSEpWYWtaUFl6RmtjazlXWkZkaE0wSmhWbTB4TUZZeFRYbFdiazVYWW10d1dWbFVTbE5YVmxaMFRsVk9VMDFYZEROV01uUXdWbGRLUm1OR2FGcE5Sa3BJVm1wR1lWSnNaSE5oUm1SVFVsWndTVmRZY0V0VGJWWnpZMFZvYkZKck5WUlphMmhEVmxaYWRFMVlaRlJOVmxZMFYydG9UMVl5U2tkWGJFNWFWa1UxVkZscVJuTmpiRnBWVW14a1RsWnVRa3BYYTFaWFRVWmtjMWRzVmxOaE1uaG9WbXhhWVZWR1dYbE5WV1JxWWxVMVNsVXllR0ZVYlVwMFlVVm9XR0V4U2toVmVrcFRVbXMxVjFwR1dtbFNNVXBaVm0xMFYxSXdNSGhYYmtaVVltMVNVMVJWVWxkU01WSnpWMjEwVmsxcmNFbGFWVnB6VjIxRmVWVlVRbGRXUlZwVVZtMTRZV1JXY0VoalJtUnBVak5rTmxadGVHdE5SbXhYVlZob1ZHSnNTbEZXYTFVeFdWWnNWVkp0UmxkU2JIQlpXbFZrTUZVd01YSk9WV2hhVFVad2FGbFdXbXRTYkU1eFYyeG9WMDB5YUc5V2ExSkhXVmROZUdORmJGTmlSbHB3Vm14YWQxVkdXbGhqUlRscFRWVndlbFl5ZUd0WFIwcFpWVzA1VlZac1ZYaGFWM2hYWkVkT1NGSnRhRk5oTWpoNVZtMHhORmxXV25SU1dHaFlZbFZhYUZacVRtOWpiR3Q0VjJ0MGExSlViRmhXUjNoUFlVVXhXRTlVVGxkaVdGSnlWRlZrVW1WR1duVlRhelZYVm01Q1dsZFhNVFJaVmxsNFZXeGtXR0pWV2xkVmJYaGhWMVpTVjFkck9XaGlWWEJYV1RCV2ExWXhXWHBoUlZKWFlXdEdORlZzV21GamJWWkhXa1prYkdFd1dUQldNV1IzVXpGTmVGZFlhR3BTVm5CWldXdGFZV0l4VWxaaFJVNXBUVlp3U0ZadE1UQlVNVXB5WTBab1YySllhSEpYVmxwS1pXeFdjMVpzY0doTlZuQlpWa1pTUjFZeVVraFVhMXByVW0xU1ZGbHJhRU5YUmxwSFZteE9VMDFYVWtoV01uUmhWa2RLZFZGc1pGcFdNMUl6VmxSR2QxWXhaSFZhUms1T1lUTkNTVlpVU25wTlZsVjRWMjVXVWxkSGFGaFphMXBMVTBaYWNWSnJjR3hXYkZveFZrY3hjMVJyTVhOVGJtUlhWak5vYUZWNlJsWmxSbVIxVW14U2FWSlVWbGRYVjNSdlVURmtSMWR1VW10U00xSldXV3hXZDFJeFVuTlhiWFJYVFZWd2VsVXllRzlXTURGMVZHcFNWazFIVWxoVmJURkhVMFpLYzFwR1pFNVdXRUl5Vm0weGQxSXhXblJXYTJSWVlrZG9WVmxVU205alZsWjBaVVYwV0ZKc2NIcFdWM1JMWVRBeFYySkVWbHBOUmxwUVZrZHplR014WkhKYVJsWk9WbXh3TWxZeFdtRlRNbEpJVm10a1ZXSkdXbGhXYlhoMlpXeGtWVkp0UmxkaVZscElWakkxUzFWR1duSmpTRUpXWW01Q2VWcFhlR3RqTVZwelZHeGtUbFpzY0RaV01uUlhZVEpHYzFOc2JGWmlSMUpZVkZWa2IxSkdjRmhsU0U1WVVqRmFSMVF4V210aFZrbDRVMnBTVjJKSFRqUlZha3BIVmpGT1dXSkhhRk5XYmtKWlZtMHhOR1F5VG5OaVJsWlRZWHBzY1ZSV1ZuZGxSbGw1VFZjNVZrMXNXbnBXTW5oclZqRmFSbE51U2xWaE1YQkhXbFZrVDFKdFJraGxSazVzWWxob1ZsWnNaRFJWTWsxNFdrWmtXRmRIZUhGVVZFcHZZMFpXZEdWSVpGZE5WbXcxVkd4YWExWXlSalpTYkdoWFRXNW9SRlp0ZUZwbGJVWkZVMjFHVTFKWVFrMVdWekUwVmpKTmVGSnVUbFZoZWxad1ZXeG9RMVZXV25GVGFsSmFWbXhzTkZVeGFHdFViR1JHVGxkb1ZtSkdjRE5XYlhoelZsWkdWVkpzY0ZkaVJYQllWakowVTFVeFdrZFRibFpTWVRGd1YxUlhjRVprTVZweVdrVjBVMkpIVW5wWmExcFhWR3haZDAxVVVsZGlXRkpvVjFaYVlXTnJOVmRYYkZacFVqSm9kbGRXVWtka01ERnpWMnhvYTFJd1dsUlVWM2hMVTBaYVdFNVZkR2hpUlhCNVZHeG9RMWR0U2tkalJYaFZWbXh3YUZreFdrZGpNWEJIVm0xb2JHSkdjRnBXTVZKRFlqRlJlR0pHV2s1VFIzaHZWVzEwWVZZeFVsWlhibVJPVFZad1NWcFZhR3RXTURGWFkwaHNXR0V4VlhoWlZscExWbFphYzJGR1pHaE5XRUpWVm0xd1IyRXlUbkpOVmxwb1VqTm9WRlpxU205aU1WcFlaRVprYTAxck5YcFdNV2h2VjBkRmVHTklTbFZXYkZveldsVmFWbVZYVmtkVWJHUk9WbTVDVjFaV1dtOWlNVmwzVFZoR1UxZEhVbFpXYTFaM1YwWldkR042VmxkaVZWcEpWVzE0VDJGV1pFaGhSbFpYVFc1b2NWcFZWVEZUUmxaeVdrWm9hRTFZUW5aV1ZFSldUVlpWZUdKSVNscGxiRnBQVkZab1ExWXhXbGhsUjNSWFlsVndTVlpYZEc5WGF6RkhWMWhrVjJKWWFISlZNVnBIWkZaa2MyTkhiRmhTTW1nMVZteGtORmxXVFhoWGJHUllZbXhLVkZsc1pEUldSbEpZWlVWYWEwMVdjSGxXVjNScllVVXhXR1ZHYUZkU2VsWlFWbFJHYTFOR1ZuTlZiSEJwVW10d1dWWnRNVFJXYlZGNFkwVldWbUpGY0U5V01GWkxVMnhrY2xadE9WVk5WbFkwVlRKNFYyRldTbGhsUm14YVZrVmFhRlJVUm1GV1ZrNXlaRWQwVTJKR2IzaFdiVEUwWVRGU2MxTnVUbXBTTW1oWVZXcE9iMkZHYTNsTlZrcHNWbXMxZVZZeWVGTmhWbGw2WVVaQ1dGWXphR2hWZWtaVFVqRmtjMXBHV21oTlJGWlZWa1prTUdReVZuTlhhMmhzVWpCYVdWVnFRbUZsVmxKeldrYzVWMVpzY0RCV1Z6VmhWbTFLUjJOR2FGZE5SbFkwVm0xek5WWXhWblJpUms1WFlrZDNNbFp0ZUdwa01sRjNUVlprV0dFeVVsbFphMXAzVlVaYWMxWlVSbWhTYkZwNFZrZDRUMkpIU2tkWGJteFhZa1pLV0ZacldrdGtWa1p5V2taV1YySldSWGRXYlhCSFdWWlplVlJyVmxOaVIxSnZXVlJDZDFkV1duSmFTSEJPVm14c05WWkhkSE5XUjBwWllVWlNWbUpZYUROV1YzaGhWMGRPUm1SR1drNVdhM0EyVm14a05HRXhXblJUYmtwUFYwVktXRmxzVWtkV1JsWjBaVVprYWsxV1ducFdSekZ2VkcxRmVsRnJjRmhXYkZwWVZtcEdZV014WkhWVmJGcHBZVE5DV0ZaR1l6RmlNVWw0WTBWV1UyRXpVbkZXYlhNeFpXeGFXR1ZIZEZkTlZuQkhWVzF3VDFZeVJuSmpSRTVXVmtWRmVGVnRjekZXTVhCSFZHMXNVMDB5YUdGV01XUXdZVEExUjFkclpHbFNiV2hQVm10YVMyTnNWblJsU0U1T1RWWndXVnBGWkVkV1ZURlhZMFJHVmxaNlZqTldNbmhoVmpGa2MxVnNaRmROTW1oNVZsZHdTMVF4U25SVmEyUllZa2RvVlZWc1ZuWmxWbGw0V1ROb1QxSnNWalJXUjNodlZrZEZlR05HVmxwaVJscG9Wa1JHVjJOV1VuUlBWazVwVW01Q1IxWldZM2hOUjBaR1RWWmtWR0pIZUZoWmJHaHZZVVphVlZOclpHcGlWVFZJVm0xNGEyRldTbk5qUnpsWFVtMVJNRmxVU2s5V01VNTFWV3hDVjFaSGVGbFhWbEpIWkRGa2MxZFliR3RTYlZKeVZGWmFZV1ZXVWxkV2JVWm9Za1UxUjFZeWVHdFdWbHB6WTBkb1dsWldjRlJXYkZwTFpGWmtkR1ZHVGs1U2JrSkpWbTE0YTA1R1RYaFhXR1JPVjBVMVZWbFVUbTlYUmxwMFRWYzVUazFYZUhoVk1uUXdZV3N4VjFkdWJGcGhNbEo2VmxSR1lWZFdSblZpUm1oWFlrVndUVlpIZEdGVE1WbDRWMjVPWVZJd1dsUlVWRVpMVm14a1dHUkdaRmROUkVJMFZtMDFVMVJzU2taWGJHaFhZbGhOZUZVeFduZFdiRnB5VDFad1YyRXlkekpYVmxadldWWmFkRkp1U2xOV1JWcFlWRlZhZDJOc2JEWlRhM1JUWVhwV1dGZHJXazlVYXpGMFducENWMkpVUlhkV2FrcEtaVlpTV1dGR1RtbGhlbFozVmtaU1MxVXlUa2RXYms1WVlUTlNWMVp0ZUdGbFJsVjVaVVU1VjFZd2NFcFZWM2h2VmpKS1dWVnVTbGRTZWtaTVZXMXpNVll4Y0VkYVJrNU9UVlZ3VWxadGNFdGxiVlpIVkd4a2FsSldXbGRaYTFwaFZERmFjVkpyZEdsTlZuQjRWVzE0WVdKR1NuTmpSbXhXWWxoU2RsWkVSbUZqTVdSelZteGFhR0Y2VmxCWGExSkhWMjFXV0ZScldsVmhlbXhVVm10YVlWZFdXbGhOVkZKcVRWZFNTVlZzYUhkVmJVcEdUbFphVjJKR2NHaFpWVnAzVWpGa2RGSnNUbWxXVm5CTFZtdGtORk15UmxkWGJrcHFVa1phV1ZacVRsTlhSbHBWVW14a1UwMVZOVnBaYTFwaFlVVXdlRk5zYUZkaVZFSTBWa2R6ZUZZeFZuTmhSM2hUVFRGS1ZsWnRjRU5YYXpGelYyNVNiRk5IVWxaWmExcHpUbFphVjFWclRsZE5WWEJIVlRJMVlWZEdXbk5qUmtKYVpXdGFURmt4V210a1IwWkhWRzE0YVZKdVFsbFdiWGhUVVRKRmQwNVZaRk5YUjJob1ZUQldZVlV4YkZobFJYUldVbXh3TUZwRlpFZFhSMHBIWWtSV1lWSlhhSEpXYlRGTFZqRmtjVkZzY0ZkV01taFpWbTB4ZW1WR1dYaGFTRTVTWWtad1dGUlVTbTVsVm1SeVZXdDBWRTFWY0hwV2JUVlBWa2RLU0dGR1VscGlXRkpNVmtaYVlXTXhaSFJQVjNST1lUSjNNVlpVU1RGVU1WcDBVbGhvV0dKR1NsaFpWRVozWVVac1ZsZHVUbXBpU0VKSldrVlZOVlV5U2taWFZFSlhUVzVTY2xWcVJtdFNNV1JaWVVab2FWSXhTbGhYVjNoVFVXMVdSMWR1VGxoaGVteFZWV3BHWVZJeFdraE5WV1JXVFVSQ05GVXljR0ZXTVZsNlZXeGtWV0pHY0hKVmFrWjNVMVpTZEdKR1RsZFNiSEJhVm14a2QxUXlTWGROVldSWVltdGFVMWxzVW5OalZteFpZMFprVkZKdGVIaFdSekV3WVZaS2NtTkZhRmROYm1oUVZtcEJlRkl5VGtWVWJHUlRUVEpuZWxadGNFZFpWMDV6WTBWYVQxWXllRlJXYTFwaFYxWmFkR1JIUmxaTlZtdzBXV3RhYjFaSFJYbGhSMmhXWVRGd1RGWnRlRk5XYkhCSVQxZG9VMkpHV1RGWGJGWlhZVEZSZVZOc1dsaGhNbmhXV1d0YWQxZEdXbkpYYTNCc1lsVmFSMVpYZUd0VWJVcHlVMnRXV0ZkSVFraFZha3BUVWpGV2RWTnRhRk5pUm5CMlZrWlNRMU14V2xkYVJtaE9VMGRvVjFsc1dtRlhSbGw0WVVkMFYySlZWalJaTUZwRFZqSktWVlpyVW1GV2JIQXpWbTE0VjJNeGNFZFhiV3hUVFZWd1NsWXhVa05XTURGSFYyNU9XR0V4Y0ZWWlZFcHZWbXhhY1ZSdE9XcGlSbFkwVjJ0V2ExUXlTa2RYYWtKV1lsaE5lRlpyV2twbFZsSnhWV3hrYVZKdVFtOVhWbEpMVW0xV1IxVnVWbFZpUlRWWlZXcEdTMVpXWkZobFJrNVhUVlp3V0ZZeU5VOVdNV1JJVldzNVZtSlVSbFJhVlZwWFYwZE9SMVJzVms1V2JrSTFWbXBLTkdReFdYZE5XRlpvVTBoQ1dGVnFUbTloUmxWM1drWmtWRlpzV25wWGExVXhWVEpGZWxGcmJGZGhNbEV3VjFaa1VtVldVbGxoUjJ4T1RUQktkbFpYY0U5Vk1WRjRWV3hrYUZKVk5WWlZiWGgzVjBac1ZtRkhkR2hXVkVaNVdUQm9kMVl4V1hwVmJHaFhWa1ZhYUZWcVJtdGtSMFpIWTBkb1RtSkZjRFZXYTJRd1dWWldkRlpyWkdwU1YyaFVXV3RrYjFkR1duSldiVVphVm14c05WcEZXazlXUlRGWFkwVm9WMDF1YUdoV1IzaExVbXhPZEdGR1dtaGhlbFpWVjJ4a05GWXlUbk5YYkZaWFlrWktWRmx0ZEV0VFJscEhWMnhhVGxac2JEUlZNV2gzWVVaS1JsTnNhRnBXTTFKTVZtdGFWMlJIVGpaU2JHUk9ZVEZaTWxZeWRHdE9SbFY0VTI1T2FsSnNTbGhaVjNSTFlVWndSVkpyTld4U2JIQjZWbTE0UzJGRk1YTlRibVJZVmpOU1YxUldXbHBsUmxwMVZXczVWMDFHY0doV2JYaFRVakZrVjJKR1dsZGlWR3hZVm14U1IxZFdXbGhOVnpsWFRVUkdXRlp0Y0ZOV01rcElWV3Q0VmsxR1ZqUldha3BIVWpGU2MxcEdaRk5XVm13MlZtMHhkMU15VVhoU1dHeFZWMGRvVlZsVVNsTldSbXgwWlVWMFYySkhlSGxYYTFKVFZsVXhWMkpFVGxoaE1YQk1XV3RhWVdNeFduRlZiR1JwVjBVd2VGWnNZM2hUTVU1R1QxWldWV0pJUW05VVZscDNWbFphYzFwRVVsaGlWbHBZVm0wMVMyRXhTbk5qU0VKWFlURndhRnBXV21GU01YQkZWVzFvVGxaWVFsbFdWRW8wVmpGWmVWTnNXbGhpYTBwWFdWZDBkMVV4VWxaWGJVWlRWbXR3TUZwRlduZFdNa3BYVTJ4b1YxSnNjR2hXYWtwSFZqRk9jVmRzVG1sU00yaFlWa1pXYTFVd05YTlZiR1JZWWxoU1dGWnRkR0ZsUmxwSVRWUlNWazFXY0VsYVZWcDNWakpHY21KNlFscGxhMXBVV1hwR2EyTnRSa2hsUmxKVFlUTkNXbFpyV2xkWlZrMTRVMWhvVm1Kck5WbFpiVEZUWTFaU1YxbDZWazlpUjNoWFZqSjBUMVl3TVVWU2JIQldWak5OTVZZd1pFdFNNazVIWVVaYWJHRXpRa2xYV0hCSFZqSk9jMWR1VGxWaVIxSlVXV3RvUTJSc1dYaGFSRUpvVFd0V00xUnNWbXRXYkdSSVlVZG9WbUZyU21oV01WcGhZekZXY2xwR1pHbFNNMmcxVmpGU1QySXhaRWRUYmtwUFZsZDRZVlJVVGtOU1JsbDNXa1ZrYW1KRk5URlpNRnBoWVVVeFdWRnJiRmRoYTBwb1drUkdTMlJHVW5KYVJsSnBVakZLZWxkWGVHOWliVlpIVjI1T1ZtRXlVbGhVVmxwSFRrWldkRTVWT1doV1ZFSTFWbGMxUTFadFNrZGpSWGhYVmtWYWFGa3hXazlqTVZKelZXczFWMkpJUWxoV2JGcHJUVWRGZVZKc2FGUmhNWEJRVm0weFUxZEdWbkZVYkU1VlVtMVNXRlpzYUc5V1JrbDRWMnRrVjJKWWFHaFdha3BMVmpGT2RXSkdaRmRTVnpoM1ZsY3dlRlZ0VmtkVWJsWldZWHBzV0ZsclZuZFhWbHAwWlVaT1YwMVZjRWhXTVdoellXeEtWazVZUmxWV2JGb3pWVEJhVjJSSFZraFBWbkJYWVROQ1lWWldaRFJVTVZwWFYyeGtXR0pYYUdoVmJYaDNWakZ3VmxkdFJtcGhlbXhZVlRJeGMxVXlWblJrUkZwWFRWZFJkMVpxUmxabFJscDFWR3hvV0ZJemFGaFhWbEpQVlRGWmVGZHVTbGRoTTFKVlZXMHhORTFHY0ZaV1ZGWlhUV3R3U0ZVeU5YTldhekZ4VW10b1YxSXphRXRhVnpGSFVteGtjMXBHWkdsVFJVbzFWakZhVTFJeFVYbFVXR2hVWWtkNGFGVnRjekZqUmxweVYyMUdXR0pHY0ZsYVZXUkhWa1V4VmxacVVscE5SbkIyV1ZkemQyVldWblZVYkZwb1lUQlpNRlpITVRSak1WcHpXa2hLVldKWGVGUlVWVnB5WlZaYVdHVkdUbEpOVjFKSVZqRm9kMkZHU25SaFJtUlhZVEZhTTFacldsZGpWazV5WkVaT1RtRXpRa2xXYlRCNFlqSkdSazFWYkZKaWJIQllXV3hvUTFKR1duRlRiRXBzVm1zMWVsZHJaRWRXUmtwWlVXMDVWMVl6YUhKV1ZFcE9aVVprZFZKc1NtbFNNVXBSVm0weE5GTXlWbk5hU0VwV1lrVTFiMVZzVWtkV01WbDVaVWhrVjJKR2J6SlZiWEJQVmpKS1IyTkhhRmRoYTFwUVdUSnpOVmRHU25OYVJUVk9ZbGRuTVZadGRHcGxSVFZIVkZob1dHSkhVbkZWYkZwM1ZVWmFjVlJ0T1dwU2JGWXpWbTEwYTFSck1WZGpSbWhYVmpOU00xWkhlR0ZqTVVweFZteGFUbFl5YURaV2JGSkxVekZPU0ZKclpHbFNia0p3Vm10V1ZtUXhaRlZSYlVaWFRXczFXRlZ0TlZOVk1rWTJZa2hDVm1Gck5YWldNRnBoWXpGc05sSnNjRmRpV0doWVZrWmFWMVl5UmxkVWEyaFdZa2RTV0Zsc1VrZGtiRnB5VjI1T1dGSXhXa2hXTWpFd1ZHeGFXVkZxVWxkV2JWRXdWbXBHVm1WV1RuTmhSMmhUVmpOb1dsZFdVa3RVTURWSFYydG9UbFp0VWxsVmJYUjNaVlpzY2xkcmRHaFdiVkpIVlRKNFExZEdXWHBoU0VwWFZrVndWRlpxUm1Gak1WcHpWV3hrVTFadVFsaFdhMXByVFVkTmQwNVdaRmRpYkVwelZXNXdjMWRXVm5GUmJtUk9VbTVDVjFkcll6VldNa3BXVjI1c1ZrMXFSblpXYkZwaFl6Sk9SMUZzWkdsV1JWcEpWbFJHWVZVeVVraFRhMlJWWWxkNFdWVnRkRmRPUmxweFVtMUdWMDFyYkRSVmJHaHpWVEpLY21ORk9WZE5SbkJNVjFaYWQxZEhVa2xhUm1SWFlraENObFp0ZUc5aU1WRjRVMjVXVW1FeWVHaFZiR1J2VlVaYVZWSnJkRmRXYTNCNVdUQmFhMVl5Vm5KWGFscFhZVEpTTmxwVldrcGxWbEp5Vm14V2FWSXlhRnBXVkVKWFV6RlNWMXBHYUU1V1JrcFdXV3hhWVZkR1dsaGxTRTVvVm10c05WbFZXbGRXYlVwSFYycE9XbUZyV25KV01GVjRWbFpHZEdSRk5WTlNWbkJhVmpGa01GbFhSWGhYYkdoVFYwZFNVRll3Vm5kWlZteFZVMnhLYTAxV1NucFdNalZQVmpKS1ZsZHJaRmRTZWtaMldWWmFZVmRXUm5OalJtaHBVbXh3VlZZeFdtRmhNazE0V2toT1lWSnNTbTlaVkU1RFYyeGtWMXBFUWxSaGVrWklWakZvYTFkSFNraFZiR3hXWWxSV1JGVnFSbE5XTVdSMFVtMXNVMDFHV1RCWFZFSlRWakZaZVZKdVNtbGxhMHBoVm10V1JtVkdWWGRYYXpscVlsVmFTRll5TVc5VWJVcFlZVVp3VjJKVVJUQlpha1pXWlVaT2MxcEhiRk5pVmtwWlYxWlNTMVV5VGtkaVNFcFhWa1ZhV0ZSV1duZFRWbkJHVm1wQ2FGSnJjSHBaTUZweldWWmFXR0ZJU2xkaVdFNDBWakJrUjFKc1ZuTlhiV2hPVjBWR05WWXllR3RPUmtsNVZXeGthbEpYVW05VmFrbzBWMFpTVlZOdE9WTmlSbkI0VlRGb2IxUXhTWGRqUkVKWFlsaG9hRlpFUm1Ga1IwWklUMVphYUdFeU9IZFdha0poVlRGWmVGcElWbUZTTTFKVVdXdGtNMlZzWkZkV2JUbGFWakJXTTFSV1ZsZGhWa3AwVlcxR1dsWkZjSFpXVlZwaFZteGtjMk5IZUZOTlJGWkxWbFprTkdFeVJraFNXR1JxVW5wc1dWbFVSa3RUUm13MlUyeE9WRkpzV25oV01uaHJZVlphVjJOSVdsZFNiVTE0V1dwQk1WSXhjRWRoUjNCVFZsUldVRlpYTVhwTlYxWnpWbTVPYUZJelVsZFVWM1IzVm14YWRHVkdaRmROYTNCSlZsYzFZVll5UlhoalJFNVhZV3RhTTFWcVJuZFNNWEJIV2tVMVUwMHlVVEpXYWtvd1ZqRlplVlZZYUZkaWEzQlBWbXhhZDFkV2JIUmxSMFpYVFZaS1dGWXlNVWRXYkVwelYyeHNZVlpYYUdoWlZFRjRZMjFPUmxwR1pGZE5NbWhOVjFaYWExTXhaRmhTYTJoUVZtMVNiMWxVUW5kWFZscHhVMWhvVjAxVmJEUlpNRlp6VmxkS1dHRkdVbGRoTWxFd1ZsVmFZVmRIVmtoa1JUbFRZVE5DTmxac1pEUlpWbXhYVTFod1ZtSlViR0ZXTUdoRFVrWlNjMWR1WkZkaVJsb3dWVzE0YTFZeVJYbFBTR3hYVm5wRmQxbHFSbk5XTVdSMVZHMXdVMUpZUW05V2JYQlBZakpPYzJORldsaGhlbXh4V1Zod1YxZEdaSEphUnpsb1VsUkdTbFZYY3pWV01rcEhVMnRvVjJGcldsTmFWVnBMWkZaU2RHSkZOVTVpUlhBelZteGtORmxXVFhoV1dHaFlZbXRhVlZsclZURldWbEpYVjIxR1YySkdXbGxhUlZKRFlVVXhWbU5FUW1GV1ZuQjJWakJrUm1WR1RuTlZiSEJYWWtoQ1RGZHJVa3RVTVVwWFVtNU9XR0pYZUZoVmJYaDNWbXhhY1ZKdFJscFdiSEF3Vm0wMVQyRnNTbGhoUmtKWFlsUkdkbGt3V21GamJGcDBVbXM1YVZJeFNtRlhWRUpYWVRKRmQwMVdaR2xTUlRWV1ZGWmFkMlJzYkhKWGEzQnNZbFZhU0ZadGVHRmhWbVJIVTFod1dHSkhVVEJaVkVaclVtc3hWbFpzVG1sU2JIQlFWMVpvZDFZeFRuTlhiRlpUWWxSc2NWUldXa2RPUmxWNFlVaE9WMkpWY0VkWk1GcHZWakpGZUZkcmVGZFNWbkJVVmpCa1YxTldUblJsUjJ4WFZtMTBOVlpzWTNkbFJURkhWVzVPV0ZkSVFtOVZha0poVjBac2NscEZPVTVOVmtwNlZqSjRUMWRHU25KT1ZFWldUVzVOTVZacVJrdFdWbHAwWVVab1YySkZjRTFXYkZKTFZqSk5lRlp1VGxoaVIyaHdXV3hhUzFkc1duUmpSVTVhVm10d2VsWnRlRzloTVVwSFUyeG9WbUpZVWpOV2JYaGhWakpHU0U5V2FGTmlTRUpJVmtkNGIyTXhXbGRYYmxKV1lUSm9WMVJWV25kV1JuQkhWMnhrYTFKcmNIcFdSM2hQVjBaS1ZtTkhhRmRoYTI4d1dWUkJlRk5HVmxsaVJrNVlVakpvVjFacVFtdGlNVnBIWWtoU2JGTkhVbGhXYlhoTFZqRmtjbFZzVGxaTlZuQjZWako0YjFkSFJYbFZXR1JYWVRKU1RGVnRlR0ZqVmxKelYyMXNWMUpWV1RCV2JURXdXVlpzVjFkdVNrOVdiSEJYV1d0b1ExUXhWblJPVlVwc1lrZFNWbFZYTVVkVk1ERnpVMnhvVjAxcVZsUlpWbHBMVmxaYWNrOVdaR2xTYmtGNlZrWmFZVmxYVGxkVWJHeGhVak5vVkZSVlVrWk5WbHB5VjIwNWFVMXJXbnBWTWpWVFZtMUtSbGRzYUZwV00wMTRXa2Q0YzA1c1NuTlhiWFJPVmpGS05WZHJWbXRrTVZKelYxaHdZVTB5VWxoVmFrNXZWakZTYzFwRlpHcE5WVFZhVjJ0a2MxVXhTbk5qUm1SWVZteEtURlpVU2s5ak1rcEhWMnhvYVZaV2NGRlhWM1JoV1ZVeFIxVnVUbGhpVkd4dlZtMTRkMUl4V1hsalIwWllVbTFTU2xWWGRHOVpWa3BHVjIxR1lWSkZSVEZXYWtwSFUwZFdSMVJyTldsaVYyZDZWbTB3ZDJWRk1VZFhibEpYWWtkU1dGbHJXbUZXVm14MFkzcEdWazFYZUhsWFdIQlhWR3N4V0dWSWJGZGlXR2hRVm0weFMxSXlTa1ZXYkdSWFRURkdNMVp0TVRSWlZrcHpWRzVLYUZKdVFuQldNR1J2VlZaYWRFMVVVbFpOYXpWNlZrYzFVMVV5UmpaV2JGSlZWa1Z3ZGxaRldtRmpNV1IwWTBVMVYwMUVSVEZXVnpFd1lURmtTRkp1VG1wU2JXaFlWRlZrVTFaR1duTlhiRTVYWWtad1ZsVnRlRk5VYkZsNllVWnNWMkpVUVhoV1JFcEhWMFpPYzFkck9WZFdNMmhaVmxkd1QxUnRWa2RYYkZaVFlUTlNXRlp0ZEhkV2JGVjVaVWQwYUZJd1dUSldiR2gzVmpGYU5sSnFXbFZXVjFKVFdrUkJlRll4V25OaFIyeFRZVE5DTTFZeFpEQldNbEY0VTI1T1lWSnRVbGxaYTJSVFZrWlNXR1JJWkd4aVJuQkpXbFZrUjFZeFdYZFdhazVhVFVkU2RsWnNXbUZYUmxaVlVXeGFhVkp1UWxsV2JYQkhaREZPU0ZWclpHaFNiVkpQVm0wMVExZFdXbk5aTTJSclRVUkdXRll5ZEd0WFIwcEhZMFpDVjJKR1ZYaFdNVnB6VjBkU1JtUkhlR2xTYkhBMVZtcEtNR0V4WkVkVGJsWlNZVEpTWVZSVlduZFVSbHBJWlVWMFdGWnJXbmhWVjNoclZqRktWMk5HYkZkaE1VcElWV3BLVG1WV1RsbGpSMFpUVFc1b1ZWWnRNVEJrTVZwSFYyNVNhbEpZVWxkVVZsVjRUa1phZEdWR1pGWmlWVlkxVmxjMVExZHRSWGhXV0doWFlXdGFhRlV3WkZOU2JWSkhZMFprVjFKV2NHRldha2t4WkRGSmVGZHVUbGhpYkVwWFdXMTBkMVl4VWxoT1Z6bFRUVmhDUmxWdGREQmhNVXBWVm14b1YxWXphSEpXYWtaaFVqRmtjbFpzWkdoaE0wRjZWbFpTUzFSdFZrZFVia3BoVW1zMWNGVnFTbTlpTVZwWVpVYzVVazFXY0VoWmExcHZWR3hhTm1KSVNsZGlXR2hZVkd0YVlXUkhUalpXYkZwcFZsaENTbFpFUmxOVU1XUjBVbGhvV0dKR1NsaFdhazV2V1Zad1YxZHNaR3BpVmtwSVZqSjRhMVV4V2xsUmEzQlhUVmRPTkZScldsSmxSbVIxVkd4YWFXRXpRbFpYVjNoWFdWWlJlRlp1UmxWaVZHeFZWbTE0ZDFKc1ZsaE5WRUpvVWxSR1YxUnNhSGRXYlVwSVlVaEtWMVpGY0V4V2JGcGhZekZhYzFwSGJGTmlSbGt3Vm14YVUxSXlSWGxVYkdSVFltdHdVVlpxVGtOV1JteFZVbTVrV0dKR2JEVmFSVnByWVRBeFYxZHViRlZXYkZwb1ZqQmtTMk14WkhOYVJsWlhZa2hDYjFac1ZtRldNV1JHVFZaa1ZXSllRbkJXYkdoRFUwWmFjMXBFVWxKTlZtd3pWRlpXVjFZeVJYcGhSbWhYWWxob1RGVnJXbGRqVms1eVpFZHdUbFpyY0RaV2FrbzBWakpHUmsxVmJGSmlWR3hZVlcxNFlXTnNVbkpYYTNSWFRWWmFXbGxWWkVkVk1WcElaVVphV0ZZelVsaGFSRUY0VmpGd1NWTnNjR3hoTVhCWlZsY3hOR1F4V1hoVmJrNVhZWHBzV1ZWcVFtRmxWbFY1VGxoa1YySlZWalJaTUZadlZqQXhSMk5FVGxaaVZFWlFWV3BHVDJOck5WZFViR1JwVjBkT05GWnRNSGhrTVVWNFYxaG9WbGRIYUZSV01HUnZZakZTVlZOc1RtcFNiRnA2VmpKME1GWnJNVmRqU0doV1RXNW9VRlpyVlhoV01XUnpWMnhhVjAweFNubFhWbHByVXpGS2NrNVdaR0ZTYlZKVVZGUkdTMVJXV1hoWGJGcHNVbXMxV0Zrd1ZsZFdiVXBXVjJ4U1ZtSkhhRVJhVmxwaFkxWktkRkpzVG1sV2Exa3dWbFJKTVZVeFVYaFhiazVVWWtkb1dGbHJXa3RYUmxaeVYyeHdiRll3TlVkV1J6RjNWR3hhV1ZGcmJGZFdla1V3V1dwR2MxWXhUbk5pUmtwcFVsUldWMVp0ZUdGWlYwWkhZMFZrV0dKVldsUlphMXBoWlZaa2NsWlVSbFZpUm04eVdWaHdRMWRHV25OWGJHaFhWa1ZhV0ZsNlJtdFhWMHBIVjIxb1RrMVZjRmxXYlRFd1ZqRk5lRlJyWkdsVFJrcHpWV3hhZDJNeFduRlJibVJUVFZaV05WUldWbXRXVjBwR1lrUmFXbFpXV21oV2FrWmhZekpPU1ZOc2NGZFNWbkJSVjFod1IxTXlUbGRhU0ZKb1VtczFjMWxyV25kWFJscHpWV3RPYUUxRVZraFZiR2h2V1ZaT1JsZHNVbHBpUmtwNlZtdGFWMlJIVWtoU2JHaFhZbFpLTlZadE1ERmhNVnAwVW1wYVUyRXlVbGhVVjNCWFYwWmFkR016YUZkTlYxSXdXVlZhVjJGRk1WbFJXSEJZVjBoQ1RGVnFSa3RqTVZwMVZHeFNhVll6YUZsV2JYUmhXVlpTVjFkdVRsaGlSVFZUVkZaV2MwNVdWWGxPVlRsWFZqQndTRmt3V21GWGJGcEdVMnBPV2xaV2NGUldiWGgzVWxaV2MxUnNaR2xTVm13MlZtcEtNR0V3TVVkWGEyaFVZVEZ3Y1ZWclZtRlhWbXhWVTJzMWJGSnNiRE5XTW5Rd1ZqSkdObFpzWkZkU00yaDJXVlZrUm1ReVRrVlhiR1JYVFRGS2IxWlhjRWRoTVVsNVZHdGFXR0pZUWxSWlZFNURWVVphV0dWSFJtcE5SRlpZVmpKNFYxVXlTa2hWYkZwVlZteGFXRlJyV25OV1ZsSjBaRWRvVjJFelFscFdiR014VXpGYVYxZHFXbE5pUmtwWFdsZDBZVmRHV25OWGEyUnFZa2hDU1ZsclpITlZNVnBIVjJ4c1YySllVbkpVVlZwT1pVZEtSMWRyTlZkV01taDZWbGQ0WVZsV1dYaFhibEpPVm5wc2IxVnRlRmRPVm5CV1ZtMUdhRTFFUmxkVWJGSkRWMnN4UjJOR1VsZGhhMXBvV2tWVk5WWldaSE5hUlRWcFlUQndSbFl4YUhkU01VMTRVMWhvVkdKck5XOVZha0poVmtaYWRHUklaR3RpUm5Bd1dsVmFhMWRzV1hoVGJHaFhZa2RvZGxacVNrZE9iVXBIVkd4d2FFMXJNSGhXUmxKSFpERmFjMVp1VG1GU2JIQndWV3BHUzFOV1pGVlJiR1JPVW14d2VsZHJWbk5WYlVwMVVXMUdWMkZyTlhaV1ZWcGhaRWRXU0dSSGNGZGlSbTkzVmxjd2VHTXhWWGROV0ZKVllXeEtXRmxyV25kaFJteFZVMnRhYkZKc1NqRldSM2hQWVVkS1NWRnVaRmRXTTBKUVZWUkdhMVl4V25WVGJHUnBVbTVDVUZaWE1IaFZNbFpIVm01U1RsSkdXbGRVVmxaM1pWWlplV1ZJVGxoU01GWTBWakp3VDFZeFdYcFVhbEpXWWxob2NscEdXbUZqTVhCSFZHeGtUbUpYWTNsV2JYaGhZVzFXUjFaWWJGVlhSM2hVV1ZSR2QxWXhiSEpXYm1ScVVteHdlbFpYZUd0V1ZrcHpZMFpzVlZaV1NraFpWVlY0WTIxT1NXTkdaRk5OTW1odlZtMTRhMUp0VVhsVWEyaG9VbXhhV0ZacVJrWmtNVnBZWlVkR1ZtSldSalJaTUZadllURktjMWRzYUZkaE1WcG9WMVphV21WWFVraGpSVFZYWWxaS1NWWlVTalJoTWtaSVZtNUtXR0pIZUZoWlZFWmhWRVp3V0dWR1pHcGlSMUo1VjJ0YWIxVXlTbkpUYTJoWVZrVkthRlY2UmxOak1VNXpXa2R3VTFKV2NGbFdiWFJYV1Zaa1IxZHJhR3BsYTFwVVZGZDBjMDVzWkhKYVJFSlZZWHBHTUZsVmFITldNVXAwVkdwU1YxWkZXbkpaZWtaaFl6RmFjMU50YUU1TlZYQXlWakZrTUZack1WZFhXR2hZWVRKb2NsVnNhRk5aVmxwelZXdGtVMDFXU25wWlZXUXdWakpLUjJORVFsZFdlbFpNVm0xemVHUlhSa1phUjBaVFVsWndUVmRVUm1GVU1rMTRWbTVPWVZKdFVsaFZiRlphWld4YWRHTkZkR3ROVlZZelZGVm9jMVl5UlhsaFJtUlhUVWRSTUZsVldsZGtSVEZWVld4a1UySllhRnBXUmxwVFZUSkZlRk51VG1sU1JUVllWbXBPVTJOc1draGpNMmhZVWxSc1ZsWkhNVWRXTVZweVkwWnNWMkpIVVRCWlZFWktaVlpTY2xwSGNGTk5SbkJaVjFkMFlXUXhVbGRhUm1SaFVrWktWbFJXV25kbGJHUnlZVVZrVjFZd2NGZFdNbk0xVm0xR2NrNVlXbFppV0dob1ZtcEdhMlJGT1ZkalJtUm9aV3haTWxac1kzaGtNV3hZVW10a1ZHRnNjRmhaYTFwM1ZqRnNWVkp0UmxwV2JrSlpXbFZrTUdGc1duSmpSRUpWVFZad1VGWkhlRXRUUjFaSFkwWmthRTFzUmpOWGExSkhWakpPY2sxV1dsaGlSMmh3V1d0YWQxZFdXbGhsUjNScFRXeGFlbFp0ZUc5VWJGcHlUbGhHV21KR1dqTlZha1poVjBkV1JsUnNaRTVTUlZwSFZtMHhlazVXV1hoVGJrNXFVbXhLWVZsWGRFZE9SbXcyVW14T2FrMVhVbnBXYlRGdlZHeE9SbE51V2xkaE1YQllXVlJCTVZJeFRuTmFSbVJwVWpGS2IxWlhjRTlWTVZwelYyNUdVMkpWV2xoVVZscGhUVVpyZDFacVFsZE5WWEI2V1RCYWExWldXbGRUYTJoWFRVWndhRlZ0ZUU5a1YwNUhWMjFvYUUwd1NsVldNbmhoV1ZkUmVGTlliRlJoTWxKVldWaHdWMVpHV25ST1ZVcHNVbXh3ZWxZeWVFOVdSVEZ5VFZSU1ZtSlVWbEJaVmxWM1pWWldkVkZzV21sU2JrSk5WbXhTUjJNeVRYaFhiRlpUWWtaS1QxWnRlSFprTVZwSVpVZDBUbEl3V2xsVk1uUnZWbTFGZVZWc2FGWmhhelZVVmxWYVdtVlhUWHBoUmxKWFltdEtSMVpzWkRSV01WSnpWMWhvVkdKVWJGaFpWM1JoWTJ4YWNWSnRSbGhTYTNCNVZtMTRVMkZXU25KalJteFhZbGhvVkZWWE1WSmxSbVJaWWtkd1UxWlVWbEJXUm1RMFdWWk9WMWRzWkdoVFJUVmhWbTEwZDAxR2NGWlhhemxYVm14d1dGWXljRTlYYXpGWFkwWmtZVlpXY0doWk1uTXhWbXM1VjFSdGJGZFNNMUV5Vm1wS01GVXhVWGxUV0doWFlUSlNWbGxVU2xOalZsWjBUbFZPYUZKc2NEQmFWV1JIVmxaS2RHVkdiR0ZXVm5CUVZsUkdZV050VGtkWGJHUlhaV3RXTTFkV1ZsWmxSMUpZVW10YVdHSkhVbGhaYTJoRFRXeFplRmR0UmxWTmF6RTBWVEkxUjFkSFNsaGhSbEpoVmpOb2FGWnFSbUZXVmtaMFpFVTVVMkV6UWtsV01uUnZWVEpLUjFOcVdsZGlhelZYV1d0YVMyVnNXWGhYYkhCc1ZqRmFTbFpIZUZkaFZrcDFVV3R3V0Zac1duWldha1poWTJzeFYxcEdhR2xTVlhCWVZtMDFkMUl4V2tkaE0yeE9WbGhTVkZscldtRmxiRlpZWlVVNVZXSlZjRWRaTUZwRFZqQXhkV0ZIYUZkaGExcExXbFphVDJSV1VuUlNiRTVYWW10S1dGWXhXbE5SYXpGWFlrWmtWbUpIVW1oVmFrNVRWVVpXZEU1VlRsTmlSbFkxVkZaU1ExWnJNVlppUkU1WFRXNW9jbFp0TVV0V1ZrWlpZVVprYUUxWVFtOVdiVEY2VFZaYWMxVnVUbWhTTW1odlZGWm9RbVZXV25OYVJFSmFWbXRzTlZaWGRHdFdiVXB5WTBoR1ZtSllUWGhaTUZwell6RmtjbVJGTlZkaVNFSlhWbGN4TkdFeFdsWk5WbHBZWW01Q1lWbFhjekZqYkd4WFYydDBWMDFWTlhwVmJYaGhZVWRGZWxGc1ZsZGhNbEV3V2tSR1dtVkdaSFZUYlVaVFZrWmFkMVpYZUZOV01XUkhWMjVLWVZKRlNsWlVWbVJUWlZaU1YxWnVUbHBXYTNCSVZUSjRZVlpXV2xoVmJscGFWbFp3YUZWcVJuZFNNWEJIV2tkc1UxZEZTVEJXYkZKTFRrZEplRlpZYUZSaVIxSllWakJrYjFkR1VsaGpSVnBPVW0xNGVGVldVa2RXTWtZMllrWm9XbFpXY0ZoWlZWVjNaREZPYzFWc1pGTmlSbkJaVmpGYWExVXhXWGhYYkd4b1VtMVNiMXBYZUdGVlZscFlUVWhrVDFaVVFqUlpNRnBoVm0xS1NGVnNaRnBoTWxKVVZUQmFjbVF4V25GUmJHUnBVakZLUzFaV1l6RmtNV1J6VjFod2FGTkZjRmRaYTFwM1ZFWmFjMWR0Um10U2EzQXdXV3RhVDFSdFNrWldhazVYWWxoU1ZGVnFTa1psUmxaWllVWldhV0Y2VmxWWFZtUTBaREpKZUZadVZtcFNiVkpZV1d0YVYwMHhaSEpWYkU1V1lYcEdXbFZYZEhOWlZrcFlZVVpDVjFaRldreFpNbmhyWXpKS1IyRkhhRTVXYkd0M1ZqRmtNRmxXYkZkWGJrNWhVbTE0Y0ZWdGVIZFVNVnAwWlVoa1ZsSnNjRWxhUldSSFlUSktWMUpxVWxkV2VsWllWbGN4UzFKdFRrbFJiR1JwVmtaYVJWWnJWbUZaVmxsNFZtNUtWV0pGTlU5WlZFNURUbXhhY2xwRVVscFdiVkpKVlcwMVMxUXhXWGxoUmxwWFlsUkdWRnBIZUZkak1XUnpXa1pvVTFaRldsaFdSRVpoVlRKR1YxTnNaRmhYU0VKWVZtNXdRMDB4VWxkWGJVWlhUVlpLZVZsVlpEUlZNVnBWVm0wNVYxWXpRbEJXVkVwWFl6RmFkVk5zWkZkU2JIQldWbGN3TVZFeFNYaGhNMlJZWVROU1ZsbHJWbmRYUm10M1ZXdGtWMDFXY0VkV01uaHZWakZLUmxkcmFHRlNWbkJZV2taYVQyUkhTa2RVYkdSb1RUQktWRlp0TUhoa01VWnlUVlprWVZORk5WZFphMlJUVmpGc2RHTjZSbXBTYkhBd1ZGWmFUMVV5U2tkWGFrSmFUVVpWTVZsVlZYaGpiRnB4Vm0xR1YxWnNjRmxXYlRFMFdWZFNSMVp1VmxSaVIxSlVXV3hhUzFkV1duUk5WRkpVVFdzMVdGWkhOVTlXYlVwSVZXeG9WMkV4V2toVVZFWmhZMVpPZFZwR1NrNWhla1V3VmxSR2IyTXhXbk5hUld4U1lrZDRZVmxVU2xKTlJscEZVbTFHYW1KSVFrWldWekV3VlRKS1NHUXpjRmhXYkZwMlZrUkdWMlJHVG5OYVJsSnBZbGhvYjFadGVHRlRNV1JIVjJ4b2JGSXpVbFJVVjNNeFVqRndSbGR0UmxoU2F6VkhWVEp3UzFkR1dqWlNWRUpYVWtWYWFGbDZSbGRrVms1elZXMXNXRkpyY0RKV2ExcHFUVmRKZUZOdVRsaGhNVnBUV1d4b1UySXhVbGRYYTNSWVZteHdNRnBWWkVkV2F6RnlZMFphVjJKWWFGQldiRnBoVG14S2NWZHNWbGRpU0VKNVYydFdhMVV4U2xkVmJsSnNVbXMxVDFadE5VTlRNVnAwWTBWMFQxSXdNVFZWTW5SclYwZEZlV0ZIT1ZaTlJuQm9WakJhVjJNeGNFaFBWM2hwVW14d1dsWkdXbUZVTWtaMFUyeGFhbEpYVWxoV2FrNXZWRVpaZDFkcmRHdFdhMXA1V2xWYWExWXlTbGhhTTNCWVZqTkNURlY2U2s1bFJscDFVMjFzVTAxdWFGVldiWGh2VVRKSmVGZHJaRmRpV0ZKUVZXMTBkMWRHV25SbFIzUmFWbXRzTmxaWGVGZFhiVVY0VjIxR1ZWWXphSHBXYlhoelRteEtjMXBHWkdobGJGcExWako0VjFZeFVYaGlSbVJVVjBoQ2IxVXdXbUZoUmxwelYyeGFUbFpzYkROV01qRXdZV3N4Y21ORlpGVmlSbkJ5VmxSQmQyVldiM3BhUm1ScFVtdHdTVlp0Y0VkVmJWWkhVMjVXVm1KR2NIQlpWRTVEWkRGYVdHVkhSbFJOVmxwWVZtMDFSMVpIU2taT1ZscGFZVEZ3VEZZd1dtRlhSVFZXVDFkb1YySklRWGRXYkdRd1dWWmFkRk5yWkZSaVIyaFpWbTB4VTFJeGNGaGxTR1JQWWtWd2VsWXllR3RoVmxsNVlVaGFWMkpHU2t4VWExcEtaREExV1ZWc1RtaE5WbkJXVjFkMFlWTXhaRWRYYms1V1lUQndjbFJXV25OT1ZtdDNWbXM1VldGNlJucFdNblJyVmxVeFYyTklXbGROUjFKTVZUQmtWMU5XVW5OYVIyaE9Za1Z2ZVZZeWRHRlpWbXhYVTI1U1UyRXllRlpaYTFaM1kwWmFkR1JJWkU5V2JWSlpXa1ZhYTFack1WZFhibkJYVFZkb2VsWnRNVVpsUm1SMFVteHdWMUpZUWpKWFZFbzBZekpTU0ZacmFHdFNhelZ3VlcxMGQxWXhXblJOU0doVFRXdGFXRlV4YUhOV2JGcEdVMnhvVm1FeFdreGFSM2hyVmpGa2NrOVhjRTVXV0VJMFZtcEplR0l4VlhsV2JrNVlZa1p3V0Zsc2FHOVdNWEJGVVZob1YwMVlRa3BXVnpFd1ZURktjbU5HUmxkaVZFVjNWMVphYTJNeFpGbGlSM1JVVWpGS1dGZFdhSGRTTVVsNFYxaHNUMVp0VWxoWldIQkhWMFpaZVdWRlRsZGlSbXcyV1ZWU1MxbFdTa1pqUm1oV1lrWndhRmw2Ums5ak1rWkhWRzFzYUUxSVFrOVdiVEUwV1ZkSmVWVlliRlZYUjNoVldXdGtVMkZHVm5OWGJVWlhVbXh3ZVZZeU1VZGhSa3AwWlVoc1dHRXlVWGRXUkVaTFl6RktjVlZzYUdoTmJFcEpWbXBDWVZsWFRuTmFSbFpVWWtoQ1dGWnFRWGhPUmxwMFpVZEdWVTFWTlVsV2JYUmhWbGRLVmxkc1VsVldSWEIyVkZaYWEyTXhXbk5YYXpsWFlsWktTVll5ZEc5VU1rWlhVMnhXVjJKSGFGZFpWM014Wkd4U1ZsZHRSbXBXYTFwNlYydGFWMkZIVm5OWGEyeFlWak5DVUZsVVNrdFNNVTV5V2tab2FWSldjRmhYVm1Rd1pERmFSMWRyYUd4VFIxSllWRlphZDJWV1pISldWRVpvVm10c05GVXlkR3RXTVZsNllVWlNWMkZyV25wV01GcFBZMjFHU0ZKc1RsTmhNMEoyVm14a01GWnJNVmhTYTJSWFYwZDRjMVZzWkZOVlJteHpWbTFHVkZac1NucFdNbmhQVmpBeFYyTkdXbGRpV0ZKVVZtcEJlR1JXUm5KVmJHUlRVbGhDVVZaWGNFZFRNbEpYVm01T1YySlhlRlJVVkVwdlZWWmFkRTFVUW1oTlJGWkpWbGQwYTFkR1pFaFZiR1JhVmtWYU0xWlZXbUZrUlRGVlVXczFUbGRGU2xoV2JHUTBZVEZhZEZOclpHbFNSbHBZVm1wT1VtUXhXblJOVlhSWFZteHdNVll5ZUhkaFZrcDFVVzVzVjFaNlJUQldWRVpoVmpGYWRWVnNUbWhsYkZwVlZrWlNTMkl4U1hoWGJrNVlZbFZhYjFSWGRGZE9SbHBJVGxVNVZrMVhVa2xXVjNoVFYyMUtSMU5zYUZkTlZuQllXWHBHWVZkV2NFWk9WbVJwVm10c00xWXllRmRoYXpGWVUydGtWR0pHV25CVmJURTBWMFpTV0U1WE9XeGlSbkJKV2xWa1IxWkdTWGhYYTNCWFZqTm9jbFpIZUV0amJVNUdZVVprVTAweWFHOVhhMUpMVkRKU1IxWnNiR3BTTW1oVVZGUkdTMVZHV2tkWGJUbFNUVmQ0V0ZZeWRHdFhSMHBHVGxoR1ZWWXpVak5XTUZwclkyeGFjMXBHV2s1V2JrSkpWbXBKZUdJeFpIUlNXR3hXWW10d1ZsbFVSbmRWTVhCV1YyNWtWRkpyY0hwWlZWcHJWakZLVjJOR2FGZE5WbkJZVmxSR1RtVkdaSEphUm1ocFVqRktkMVpHVWs5Uk1rWkhWbTVHVldKVWJISldiVFZEVmpGYWMxVnNaRmhTYTNBd1ZsYzFkMWR0UlhoV1dHaFhZV3RhUzFwWE1VZFNWa1p6V2tkb2FFMUlRbFpXYkdONFpXc3hWMWRZYkZWaE1uaFZXV3hvYjFaR1ZuUmxTR1JYVW14d01Ga3dWakJXYXpGV1RWUlNWMkpZYUZoV1Z6RkdaVlpXZFZGc2NHaE5WbkJaVmtkNFlXTXlUbk5YYmtwclVtNUNXRlpyVm1GVGJHUnpWbXhrVjAxV2NIcFdNalZUVm0xS2NtTkdaRlZXZWxaMlZXcEdkMUpXU25Ka1IzUlRWa1phV1Zac1pEUmhNVmw0VjJ0a1dHRXhXbGhaVjNSM1RURldWVk5yTld4U2F6VjVWMnRhVDJGV1NYbGhSemxYVmpOb2RsVlVSbFpsUmxaelYyeGthVlpXY0hsV2JURTBWakExUjFkdVVtcGxiRnBYV1d4V2QxTldVWGhWYXpsWVlsVldORll5ZUZOV01WbDZZVWRHWVZac2NGaFpNakZUVWpGa2MxcEdUbGRYUlVwTFZtcEdhbVZGTlVkVldHaFlZbXMxVjFsdGRIZFdWbXh6Vm0xR1ZVMVdXbmhXUnpBMVZUSktSMk5HYUZkTmFrVjNXVlZWZUZack5WbGpSbHBwVWpKb2VWWnNVa3RUTVZwWFYyNU9WMkpIVW5CVmJYaFhUa1phVjFWclpHaE5helZZVlcwMVYxWlhTa1pPVmxKYVZrVmFNMVl5ZUZwbFYxSkhXa2QwVGxac2NEVldSbHBYV1Zaa1NGTnVUbGhpUjFKV1ZtMTRkMkZHV2xaWGJHUlhWbXR3TVZVeU1UQlViRXBHVjJ4b1YySlVSVEJXYWtaclVqRlNjbGRzVW1sVFJVcGFWMWQwYTFWdFVYaFhibEpxVFRKU2MxVnRlR0ZsYkd4eVdraGtWazFFUmtoWk1HaHpWakZhTmxKWVpGaFdiSEJRVm1wR1YyTXhjRWhTYkU1c1lsaG9NbFl4V205a01VVjNUbFZrVjFkSGVGQldiRkp6VjFac1dXTkZaRTVXYlZKYVdUQldhMWRIU2tkalJXUlhUV3BXTTFacVFYaFdNazVIVVcxR1UySklRbEZYYTFaclV6Rk9TRk5yWkdGU01uaFVWRlJLVWsxc1duUmxSMFpXVFZVeE0xUnNWbUZVYkU1SVpVWmtWMDFIVWxSV1JFWmhZMnhrZFZwR1pHbFNNMmcyVm0wd01XRXhXbFpOVm1ScVUwZDRZVlpzV2xaTlZscEZVMnQwVTAxVk5YcFpWVnB2VmpGS1ZWWnViRmRpV0ZKWFdsVmFXbVZHVW5WVWJXeFRZa2hDZDFacVFsZFRNVkpYV2taa1YySllVbFZVVjNONFRrWmtjbUZHWkZkU01IQklWVEo0YjFZeVJuSlhhM2hYVFZad2Nsa3llR0ZrUmtwMFkwVTFWMDFWY0ZwV2JYaHJUa2RKZUdKR1pGUmlSM2hUV1d0a1UxWnNXbk5YYm1Sb1VtNUNTRll5ZUdGaVJrcHpZMGhzVlUxV2NFeFpWbHBMVG0xRmVtTkdhRmROTVVwWlZteFNSMVl5VFhoYVJteHBVbXh3YjFSVVJrdFhSbHAwWkVaa1ZFMVZOVWhaYTJoVFlrWktWV0pHYUZwaE1YQk1XbFphVm1WWFZrZFViRlpwVWxkM01sZFdWbGRaVmxsNFYyNU9hbE5GY0dGV2ExWmhWVVpzTmxKcmRGaFdia0pJVmtjeGMxWXhTbk5qUm1SWFlsUkZNRlp0YzNoV01VcFpZVWRHVkZKV2NGUlhWekY2VFZaYVIxWnVVbXRTTUZwWlZtMHhVMlZXV25ST1YzUm9VbXR3ZWxrd1duTlpWbHBZWVVoS1YySlVSbGhaTW5oclkyMUdTRkpzVGs1TmJXUTFWakowVTFNeFRYaFRiazVYWW1zMVZWbHJaRk5VTVd4eVZtNWtWVlpzY0hwV01uaFBWV3N4Vm1KRVZsWk5hbFpRVm14a1MxSXlUa2RYYkhCWFVsVnZlbGRXVm1GVk1WcHpZMFZXVm1KRk5WaFphMXAzVjJ4YVNHVkhPV2hOYTFwWVZUSTFVMVp0UlhsVmJGcFhZbGhvVEZVd1dscGtNWEJHWkVaU1UwMUdjRXRXYWtvMFpERlNjMU5ZYUZSaVJscFlWbXBPVTJGR2NFaE5WbVJxVFZWd01WVXllR0ZoVmxsNVlVWnNWMkpZYUdoYVJFRjRWakZrYzFac1RtbFNNVXBYVmtaYVYxbFhWbk5pU0VaVllsaFNiMVp0ZEhkWFJsVjVaVVU1VjAxcldubFpNRnBUVm0xV2NsZHNhRmRpUm5CSVdUSjRkMU5IU2toaVJrNVhVbXh3V2xadGVHcGtNREZYWWtaa2FWSnNjRTlXYkdSdll6RldjMWR0UmxkTlZuQXdWRlphVDJGdFNrZFdhbFpoVmxaYWFGbFVRWGhXYlU1RlVXeFdhVkp1UWxWV2JYQkhWMjFXUjFSdVJsaGlSMmhZVkZSS2IxZFdaRmxqUldSVlRWWnNORlpYTlZkV2JVcFpZVVpTVlZaRlNreFdNbmhoVjBVeFZWVnRkRTVpUm5BMlZqSjBZV015Um5OVGJGWnBVbTFTWVZsVVNrNU5WbEp5VjJ4a1dGSXhXa2hYYTFwWFlWWktXR1I2UmxkaVIxRjNWRlZhYTJNeFpIVlViRkpvVFcxb1YxZFdVa2RrTVZaSFYxaGtZVkpZVWxSWmExcExUVVp3UmxwSVRsZE5WbkJJVmpGb2QxWXlTa2RqU0VaVlZtMVNUMXBWWkV0U01YQklVbXhPVjJKclNtRldiWEJEWVRKSmVGcEdaR2xUUlhCb1ZXNXdjMVl4Vm5SbFJYUlhUVlp3TUZSc1ZUVldhekZYWTBaYVZtSllVbWhXTWpGR1pVWmtjVlJzWkZkTk1EUXdWbFJDYTFWdFZuTmpSV1JoVW1zMVdGbHRkRXBsVmxweldraGtWRTFXVmpWV1YzUnJWbTFLU0dWSVFsWmhhM0IyVm14YVYyTXhXblZhUjNoVFlraENTVll4VWs5aU1rWkdUVmhLVDFaWGFGaFdiVEZ2Wld4a1YxZHJPVk5OYXpWSldWVmFWMVl4V1hoU1dHUlhWak5vYUZacVJscGxSMDVHWVVkMFUySkZjSGRXVjNoaFYyMVdjMWRzYUU1VFIxSlBWbTE0ZDFOR1dYbGxSMFpWVFZad1YxUnNXbk5YYkZsNlZXdDRZVll6YUZoWk1uaHJZMnh3U0dOR1pHaE5Wemt6VmpGU1EyRXlUWGxTYkdSaFVsWndUMVpyV21GWFJscDBaVVYwVlZKdGR6SlZiWFJyWVdzeGNtSkVXbGhoTWxKNlZsUkdZV050VGtkVmJHUnBWMFZLVFZac1VrZFViVlpIVjI1T1YySkZjRzlVVjNoTFpERmtXR1JHV2s1V2JHdzBWakowYjJFeFNsbFZiVVpYWWtaS1NGVXhXbmRXYkZweldrWmthVkp1UVhkV2JHTXhVekZhY2sxWVZtaFNWMUpvVld0V1lWVkdhM2hYYTJScVRXdGFTVmxyV2s5VWJVcFlZVVpPVjJGcmJ6QlpWRUV4VTBaU1dXRkhSbE5XTVVwNFZsZDRhMkl5VFhoV2JrNW9VbFUxV0ZWdGVHRmxWbHAwWkVSQ2FFMVdjREJXVjNoM1Yyc3hSMVpVUmxwV00wNDBXWHBHYTJSWFNraFNiR1JYVFcxb1ZsWnRlRk5UTVUxNVZXdG9WMkV5YUc5VmJYaGhWMFpXYzFkdVdteGlSMUpZVmpJeFIxWnJNVmRqUm1oV1RXNW9lbGRXV2t0ak1VNXlUMVphYUdGNlZqSldWekUwV1ZaWmVGcElVbXRTTW1oUFZteFNWMDVzV2xobFJ6bG9UVlpXTlZVeWVGZFdNa3BIVjJ4b1dtRXhjRmRhVlZwWFZsWktkR1JIY0ZkaE1XOTRWbXRrTkZReFZYbFNXR2hxVW01Q1dGUlhOVk5YUm5CRlVteGthbUY2UmxkV01uaHZZVmRLUjJOR2FGZFNiSEJvVjFaa1QyTXhXblZTYkZKcFVsaENlbFp0TVRSVE1sWlhZa1phV0dKWVVtOVdha0ozVTBacmQxbDZWbGROVm04eVZXMXdUMWR0Vm5KU1dHaGFaV3RhTTFVeFdsTmtSa3B6Vkd4a1UwMHlaekpXYlRCM1pEQXhWMUpZYUdGVFJUVlpXV3RrVTFsV2NGaGxSMFphVm14d2VGVlhOV3RYUmxwMVVXeGtXbFpYYUhKV01GcEtaREpPUm1KR1pGTmlWMmd5Vm1wS05GbFdaRWRXYmtwc1VtMVNUMVZ0TlVOaU1WcHhVbTFHVmsxck5UQldSM1JyVmxkR05sWnNiRlppUmxwNlZHMTRZV05XU25Sa1JUVlRUVVpaTUZacVJtOWlNa1p6Vkd0YVQxZEZXbGRaYkZKR1RVWnNjVkpzWkdwaVJuQjVXa1ZrYjFVeVNrbFJXR2hZVmtWS2FGbFVSbEpsVms1eVlVZDRVMkpYYUZwV2FrSnZVVEZrUjJKR1ZsTmlWVnBaVm1wQ1lWSXhXblJsUjBaWFRXeGFlbFl5ZUZkV01ERlhZMGRvV2xaRldreFpNbk14VmpGYWMyRkhiRk5OYldoYVZqRmtORmxXVFhsV2JHUmhVbTFvY2xWdE1WTlVNVlowWlVkR1RsSnNWalJaVldoUFYyeGFjbU5HY0ZaV00yaFFWbXhhWVZZeFpIUmhSMFpUWWtoQ1dGZHNWbUZaVjA1eVQxWmtWR0pYZUZSYVZ6RXdUbXhaZUZwRVFsZE5WbFkwVm0wMVQxZEdaRWhsUm1SYVZrVTFWRlpxUm1GamJGcHlaRVpXVTJKWVkzbFdWekF4WVRGWmVWTnJiRkpoTWxKV1ZGWmtVMlZzV2xWUldHaFRWbXh3ZVZwRldtdGhWa3AxVVc1c1dGWnNTa2hYVmxwS1pVWndTVkpzYUdsU01VcDNWMVpTVDFFeFpITmFSbWhyVWpOU2NGUlhlRXRsYkZwMFRsWk9WV0pHY0ZaWmEyaExWakpLV1ZSWWFGVldiSEJoV2xaVmVGZFdjRWhoUms1T1UwVktXRll4WkRCV2JWWkhWMjVLVGxadFVsbFphMVpMVmpGYWNWUnRPVTVpU0VKR1ZUSjBNRlV5U2tkWGJuQldUVzVvY2xaSE1VdFNiVTVHVFZaa2FWSnVRbFZXVmxKSFUyMVdWMVJ1VmxWaVJscHdWVzAxUTFZeFpGZFZhMDVyVFd0YVNGWlhlR0ZaVmtwSFUyeFNWMkpZYUdoV01GcHJZMnh3UlZGc1pGTk5TRUpJVjFjMWQxTXhaSFJTV0doVVlsZG9XRmxyV25kVVJsSjBaVWRHYWsxVlducFdiVEZ6VlRBeFZtTkdSbGROYm1oeVZHdGFXbVZXVm5KaFJtUm9UVzFvZDFaWE1UUmtNVkY0WWtoT1dHRXpVazlVVmxwelRsWndSbGR0ZEdoU1ZFWllXV3RTVjFZeVNsbGhTRnBYWVRKU1RGVXdaRmRTTWtaSFkwWmtUazF0YUU1V2JYUnJUa1pzV0ZWc2FGVmhNbmhXV1Zod1YxUXhXbkZTYTNSUFlrWnNORmxWYUd0VmF6RnlWbXBTVmsxWGFIWldhMlJMVTFaR2MxcEdWbGROTUVwWlZteFdZVlp0VmxoV2ExcHFVak5vV0Zsc1VuSk5iRmw1WkVkMFUwMVdWalJXTVdoellVWktWMWRzYkZwaE1sSlVWRzE0VTJNeGNFWlBWazVvWlcxNFdGZFhkR0ZpTWtaWFdrVmtWR0pHU2xsWmEyUlNUVVpaZVUxV1NteFNiVkphV1d0a05GVXhXa2RYYkVaWFlsaENTRlY2Ums5U01rcEpVMnhvYVdGNlZsbFdiWEJEV1ZkV1YxWlliRTVXZW14WVZGVlNSMU5HV1hsalJUbFlZbFZ3U0Zrd2FFdFhhekYxWVVST1ZtSllhRE5WTUdSWFVqRndSazVXVG1sU00xRXdWbTB4TUdFd05VaFNXR1JQVmxkb1ZGWXdaRzlXUmxsM1drWk9hbEpzVmpOWGExcFBWbXN4VjFOc2JGVldiRXBVVmxkemVGZEdWblZoUmxwWFpXeGFVVlpzVWtkVE1rNXpXa2hPYVZKdGFHOVVWbHAyWld4YWMxcEljR3hTYTNCNlYydG9WMVl5U2tkalJUbFhZbGhvTTFaV1dtRldNWEJGVlcxMGFWWnJXVEZXVkVvd1dWWmFkRk5yV21wU2JXaFdWbXBPYjFSR1drWlhiVVpYVFZaYWVWWkhlRk5VYkVwR1UxUkNXRlpzU2xCWmVrWlRZekZ3Umxkck9WaFNXRUpaVjFaa01GbFdVa2RXYms1WVlsaFNjVlp0Y3pGTlZscElaVVpPYUZac2NGaFpNRnB2VjBaWmVsVnNhRlZoTVhCeVZXcEdUMk14Y0VkVmJXaE9Va1phZGxadE1YZFVNVkYzVFVob2FsSnNjR2hWYkZKWFl6RnNjMVp0UmxSU2JGcFpWRlpTVTJGR1NYaFhibXhYWWtkb2RsWnFRWGhYUmxaVlVXeGFhR0V6UWxWWFdIQkxVMjFXYzJORmFHbFNhelZZV1ZST1ExWldXblJOV0dSVVRWWldORlpHYUc5V01rcEhWMnhPV2xaRmNGUlpNRnB6WTJ4YVZWSnNaRTVXYlhjd1ZteGtORlF4WkhOWGJGWlRZVEo0YUZac1dtRlhSbHAwWlVkR2ExSnNXakZWTW5oaFZHMUtkR0ZGYUZoaE1VcElWWHBLVTFKck5WZGFSbHBwVWpGS1dWWnRkR0ZaVmtwWFYyNUdWR0p0VWxSVVYzUnpUVEZTYzFkdGRGWk5hM0JKV1ZWa2IxWnRTa2hoUlZKWFZrVmFWRlp0ZUdGa1JrcDBaRVprYVZKc2EzZFdiVEI0WldzMVYxWnVVbFJoTW1oUlZtdFZNVmxXYkZWU2JVWlhVbXh3V1ZwVlduZGlSbHB6VjI1c1lWSldjR2haVmxwclVteE9jVk5zYUZkbGExVjNWbXRTUjFsWFRYaFdibFpVWWtaS2NGWnNXbmRWUmxwWVkwVTVhVTFWY0hwV01uaHJWMGRLV1ZWdE9WVldiRlY0V2xkNFYyTXlSa2hrUmxwT1lUTkNWMVp0TVRSV01WbDVVMnRrVjFkSGFGZFpWRVozWTJ4d1JscEdUbFJXYkVwNlZrZDRUMkZGTVZsUmJVWlhZV3R2ZDFacVNsSmxSbHAxVTJzMVYxWnVRbHBYVnpFMFdWWlplRlZzWkZoaVZWcFhWVzE0WVZkV2NGWmhSMFpvVFVSR2VWa3dWbXRXTVZsNllVVjRWMkZyUmpSWmVrWlBZMjFXUjFwR1pHbFNXRUpHVm14b2QxTXhUWGhYV0doV1ltczFXVmxyV21GaU1WSldZVVZPYVUxV2NFaFdiVEV3VkRGS2NtTkdhRmRpV0doeVYxWmFTbVZzVm5OV2JIQm9UVlp3YjFacVJtRlZiVlpIWWtSYVUySkhVbFJaYTJoRFYwWmFTR1ZHWkZWTlYxSkpWVzAxUzFaSFNuVlJiR1JhVmtWYU0xVXdXbHBrTVdSMVdrWk9hR1ZyV2xwWGJGWmhZVEZaZUZkdVVtdGxhMXBZV1d4b1ExSkdXbkZTYkVwc1VtdHdNVlpITVhOVWF6RnpVMjVrVjFZemFHaFZla1pXWlVaa2RWSnNVbWxTVkZaV1ZrWmFZVmxXV25OV2JHaHJVak5TVmxsc1ZuZFRWbHBZWkVkMFYwMVZiRFpXVjNoRFZqQXhkVlJxVWxaTlIxSllWVzE0WVdNeFpITmFSMnhYWVROQk1WWnRlRk5UTURWSFUyNVNWbGRIYUZWWmJYaExWVVphZEdWRmRGaFNiSEI2VmxkNGExVXhTbk5pUkZaYVRVWmFVRlpIYzNoak1XUnlZa1prVjJKWGFEWldNVnBoVXpKU1NGWnJaRlZpUmxwWVZtMTRkMkl4WkhKWGJVWlhZbFphU0ZZeU5VdFZSbHB5WTBoQ1ZtSnVRbmxhVjNoclYwZFNSMXBHV2s1V2JIQTJWbXBHYjJNeFduUlNXSEJXWWtkU1dGUlZaRzlTUm5CWVpVaE9XRkl4V2tkVU1WcHJZVlpKZUZOcVVsZGhNazQwVldwR1UyTXhUbGxqUjJoVFZtNUNXVlp0TVRSa01rNXpZa1pXVTJGNmJIRlVWbFozVjJ4a2NsZHJPV2hXYkhCSVZqSjRZVll5U2xsaFJtUlZWbXh3UjFwVlduZFRWa3B6VTIxc2FHVnNXbFpXYkdRMFZUSk5lRnBHWkZoaE1taHlWVEJrVTFZeFVsaGtTR1JPVW14d1dWUnNXbXRXTWtZMlVteG9WMDF1YUVSV2JYaGFaVzFHUlZOdFJsTlNXRUpOVmxjeE5GUXlVa2hUYTFwUFZqSjRXRmxVVGtOVWJGcDBaVWRHVmsxVlZqUlZNV2h6VmtkS2NrNVdXbHBoTVhBelZtMTRjMVpXUm5WYVIzQnBVak5vVjFaVVNuZFZNVlY0VjI1T1UyRnJOVmxaVkVwU1pERmFjbHBGZEZOaVZUVkdWVzE0YjJGRk1YSk5WRkpYWWxoU2FGZFdXbUZqYXpWWFYyeFdhVkl5YUhaWFZsSkRaREExYzFkc2FHdFNNRnBVVkZkNFMxTkdXbGhPVlRsb1ZtdHdWbFp0ZUhOV2JVWnlWMnQ0VlZac2NHaFpNVnBIWXpGd1IxWnJOVmRXYmtFeVZqRmtkMVF5UlhsU2JHUlVZa2RTVlZsclZURlhSbXhZWkVoa1YxSnNXVEpWYlhoclZqRmFjbGR1YkZoaE1WVjRXVlphUzFaV1duTmhSbVJvVFd4R00xWnJVa2RoTWs1eVRWWmFhRkl6YUZSV2FrcHZZakZhV0dSR1pHdE5helY2Vm14b2MySkdTbGRqU0VwVlZteGFNMVJWV2xOak1XUnpWR3hrVGxadVFsZFdiVEV3VlRGWmQwMVlWbEpoTVVwV1dWUkdWbVZHV25GU2EzUnFUV3RhU1ZWdGVFOWhWbVJJWVVaV1YyRXhjRmhXYWtwU1pWWlNjMXBHWkZoU01taFpWMVpvZDJNeFZYaGlTRXBhWld4YVQxUldaRFJsVmxwMFpVVTVWMkpWY0VoWmExSlhWakZaZWxWWVpGZGlXR2hvVlcxNFQyTnRSa2RqUjJ4WVVqSm9WbFpzVWtkaE1VMTRVMjVPVldKc1NsUlpXSEJYVjBaU1dFMVhPVk5OVm5CNlZqSXhkMkpHU25OU2FsSlhVbnBXVUZaVVJtdFRSbFp6Vld4d2FWSnJjRmxXYlhoaFdWZE5lRmR1VWxOaGVsWndWV3BHUzA1R1dsZFpla1pWVFZaV05GVXlOVXRYUjBwSVpVWnNXbFpGV21oVVZFWmhWMFV4VjFwSGRGTk5SbkJMVm0weE5HRXhWWGhYV0d4b1VrWndXRlp0TVU5T1JscFZVMnMxYkZacmNIbFdNbmhoWVZaS1dWRnVaRmRpV0doVVZtcEdjMVl4WkhKYVJtaHBVbFJXZDFaR1pEQmtNbFp6VjJ0b2JGSXdXbGhXYWtKWFRURnJkMkZGZEZoaVZWWTFWbGMxWVZack1VZGpSazVoVmxad00xVXdXa3RqTVZaMFlrWk9XRkpWV1RCV2JYQkxUVWRHY2sxV1pGaGhNbEpaV1d0YWQxVkdXbk5XVkVaWVZtMTRXVnBGVmpCaVIwcEhWMjVzVjJKR1NsaFdhMXBMWkZaR2NscEdWbGRpUmxZMFZtcENZVk50VmtkVWJrWlRZa2RTYjFsVVFuZFhWbHB5Vld0a1UySldXa2xWYkdoM1dWWkplV1ZHVWxkaVdGSXpWbXRhWVdSSFRrWmtSbHBPVmxSRk1GWnRNVFJXTVZaMFVsaHNWbUY2YkdGWlZFWldaVVphY1ZKdFJsTk5WbHA2VjJ0YWIyRkhWbkpYYTNCWVlrWmFXRmxxUm5OV01XUnpZVVphYVZZeWFGbFdSbHBoWkRGSmVHTkZWbE5oTTFKeVZXeFNWMWRHV2xobFIzUlhUVlp3U0ZZeWRGZFdNa1p5WTBST1ZsWkZjRTlhVlZwUFkyeHdSMVJ0YkZOTk1taGhWakZhVTFReFJYaFdXR2hxVW0xb1QxWnJXa3RqVmxwMFpVWmtUMUpzY0RCVVZsWnJWbGRHTmxKc2JGVk5Wa3BVVmpKNFlWWXhaSE5WYkdSWFRUSm9hRmRzV21GV01rNTBWV3RrV0dKSFVuQldiRkpEVGtaWmVGa3phRTlTYkVZMFZqSTFUMVp0U25KalJsWmFZa1phYUZaRVJsWmtNWEJJWTBkNFUySklRbGxXYWtsM1RsWmtjMWR1U2s5WFNFSlhXV3hvUTJGR2JGZFhhM0JzWWtWYWVsWnRlR3RoVmtwMVVWaHNWMUpzV21oWlZFcFRVMFphY21GRk9WZE5NbWhWVm0xMGEwNUdaSE5YYmtwaFVrVktjbFJXV21GTlJscDBUbFpPYUZKck5VaFdNbmh2Vm0xS1IyTkZlRlpoYTFwVVdUSjRhMlJXWkhSbFJrNU9VbTVDU1ZadGVHdE9SazE1VW14a1dHSkdXbGhaVkU1dlYwWmFkR1ZGZEZOU2JGcDRWVEowTUdGck1WZFhibXhhWVRKU2VsWlVSbUZYVmtaMVlrWm9WMkpGY0UxV1IzUmhVekZaZUZac2JHaFNNRnBVVm10a05GWnNaRmhrUm1SclRVUkdXRmxyV21GWGF6QjVZVVpzVm1KWVVqTldha1pUWXpGYWNrOVdhRk5OUm5BMVZsUkpNV1F4V25SU1dHaFhWa1ZhVjFSVlduZE5NVlowWXpOb1dGSXhXa2hYYTFwclZqSktXVmt6YUZkaVZFWXpWVlJHV21WR1ZuVlRhemxYWWxaS2VGWlVRbGRrTWsxNFZtNUtXR0pWV2xkVVZscDNaVVpWZVdWRk9WZFNWRVpZVmpKNFlWWnNXWHBWYmtwYVZtMVNURlZ0Y3pGV01YQkhXa1pPYVZKWVFsWldha1poVm0xV1IxUnNaR3BTUm5CVVdXdGFkMWRHYkhOYVJ6bHBUVlp3ZUZWdE1VZFZNa3BYVW1wU1YxSjZWbFJaVjNoTFl6Rk9jMkZHWkdsV1JVVjRWa2N4TkZkdFZsaFVhMXBWWWxoQ1QxWnNXblprTVZwVlVtMDVhazFYZUZoVk1uaHpWVzFLUms1V1dsZGlSbkJvV1ZWYWQxSXhaSE5qUjNST1ZtNUNOVlpFUm1GVE1WSnpWMWh3VmxkSVFsbFdhazVUVjBac1ZWTnJXbXROUkVaYVZsZDRZV0ZXVGtaVGJHaFhZV3RLZGxWVVNsZGpNa3BKVkd4b2FWZEdTbFZXYlRFd1pERmFjMWRzYUU1V1JVcHZWV3hTUTA1V1pGVlViVGxYVFZad2Vsa3dhR0ZYUmxwelkwWkNXbVZyV2t4Wk1WcHJaRWRLUjFSck5VNVNXRUpZVm0wd2VFNUdiRmhWYmxKWFltczFhRlV3Vm1GV1JteHpWVzVPVjFKc1dqQmFSV1JIVjBkS1IySkVWbUZTVjJoeVZtMHhTMVl4WkhGUmJVWlhWakpvVlZadGNFZFRNVmw0Vkc1S1lWSnNXbTlVVm1oQ1pWWmtjMVp0ZEZOTlZYQjZWbTAxVDFWdFNraFZhemxYVFVaYVRGWlZXbHBsVjFaSVVteGtUbFpYZHpGV1ZFa3hWREZhZEZKWWJHeFRSVXBYV1d0YVlVMHhhM2xsU0U1WFZtczFlRlpYZUU5V01rcEdWMWh3VjAxdVVuSlVWVnByVWpGa2MxWnNUbWxTYmtKb1YxWlNTMVF3TlVkWFdHUllZVE5TVkZsclduZFdiRlowWlVjNWFGWnRVa2hWTW5CaFZqRlplbFZ0YUZaaGExcHlWV3BLVDFKc1pISk9WbVJPVFcxb1dsWnRNVFJaVjAxM1RsWmtXR0pHV2xSWmEyUlRWbXhzV1dOR1pGUlNiWGg0VmtjeE1HRkdXbkpqUm14WFZucFdURlpzV21GT2JFcHpWV3hrVG1KdGFGbFhhMVpyVkRGT1YxVnVVbWhTTW5oVVZtdGFZVmRXV25OWk0yUk9WbTE0V0ZscldtRlViRnBZWVVoT1ZtSkdjR2hXYWtaaFpFVXhWMVJ0Y0dsU2JGa3hWMnhXVjAxSFJYaFhibFpTWVRKNFZsbHJXbmRrYkZwVlVtMUdWMVpzY0hsV2JYaHJWR3hhY21ORlZsaFhTRUpJVlhwR1NtVkdUblZVYldoVFRVWndWVlpxUWxkVE1WcEhWMnRrVjJKSFVsbFpiRnBoVjBaYWMyRkhPVmROYTFreVZtMTRRMVp0U2xWUlZFWlZWa1ZhTTFadGVGZGpNWEJIVjIxc1UySllZM2hXYlhoclRrZFJlRmR1VG1GU1YzaFRXVzAxUTFsV2JISlhibVJYVW14V05GZHJWbXRVTWtwSFYycENWbUpZVFhoV2ExcEtaVVpLV1ZwR1pHaE5WWEJKVjFaU1IyTXhXWGhqUldSWVlYcFdXRmxyV25ka2JGcFlaRVprYTAxWFVsaFdiVFZQVmpGYVJsZHNUbFZXYlZKVVdsVmFWMWRGTlZaUFZscE9WbGhDTlZacVNqUmtNVmwzVFZoV1ZtRnJOVmhXYm5CSFYwWndSbHBGWkZSV2JIQjZWMnRhVDFZd01YUmFla3BYWWtad2NWcFZXbFpsVmxKWllrWk9hRTFZUW05V1Z6RXdVekZrUjFWc1pHaFNWVFZoVm0xNGQxTkdXWGxsUlRsb1lYcEdlVmt3V205WFIwVjRWMjFvVjJKSFVrZGFSRXBQVTFaT2MyTkdaRk5XZW1nelZteGtORmxXVm5SVldHaHFVbGRvY2xWdGVHRlhSbEpYVjI1a1dGSnNjRmxVVldoclZHeGFjMk5GYUZkTmJtaG9Wa2Q0UzFKc1RuTmlSbkJYVFRGS1RGWkdWbUZWTWsxNFdraEtZVkp0YUZoWmJGcExUbFprVlZGdFJsUk5WbXcxVm0wMVUySkdTa1pYYkdoYVZqTlNURnBIZUhOT2JFcHlXa2R3VG1FeWR6SldNblJyWXpGVmVGZHVTbXBTYkVwWlZtcE9iMVl4VWxkWGF6VnNVbXh3TVZaWGN6VldNREI0VTI1a1dGWXpVbkpXVkVaS1pVWmtjbUZIZEZOWFJrcG9WbTE0VTFJeFRsZGpSbHBYWWtkU1dGWnNVa2RUVmxwWVRsVjBWMDFWY0RCV1YzaHZWakpLV1dGRmVGcE5WbkJRV1hwR1YyTXhjRWRhUm1SVFlraENSMVp0TVhkVE1sRjRVbGhzVlZkSGFGVlpWRXBUVmtac2NscEhPV2hTYkZwNlZsZDBhMkZyTVZkalNIQlhZbGhvTTFscldtRmpNa3BGVkd4a2FWZEhaM3BXYTFKSFdWZFNWMUp1Vm1wU2JXaHZXVmh3VjAxc1duTldiVVpZWWxaR00xUnNXbUZVTVZsM1YyeG9XbUV4Y0ROVk1WcHJWMFV4VlZWc1ZrNVdia0kyVm14a05GWXhXblJUYkZwWVlYcHNWMVJWWkZOalZuQldWMjFHVjAxWFVqQlVNVnAzVmpKR05sWnFXbGRXTTJoMldWUkdZVk5HVG5OaVJrcHBVbTVDV0ZkV1VrZFpWbGw0Vld4a1dHSllVbkpWYWtaaFUxWlNjMXBFVWxaTlZuQkpXbFZXZDFZd01YVlZiR1JoVmxkU1RGVnFSbXRqYlVaSVlVWlNVMkpJUWxwV2JHUTBZVEpKZVZadVRsZGlSMmhQVm0xek1XTldiSE5XYm1SVFRWWndXVnBWVmpCV01ERkZVbTV3VmsxdVRURldNR1JMVWpKT1IyRkdXbWhoTUZrd1YxaHdSMVV5VFhoYVNFNVhZa2RTVkZsVVRrTmtiRnB5VjJ4a2FFMUVWa2hWYkdodllWWk9SbGRzV2xwaVJscG9WakZhWVdOV1NuUlNiR1JwVWpOb05WWXlkRzloTVdSSFUyNUthbEpYVWxoWmExcExVa1prVjFkcmNHeGlSbG94V1RCYVlXRkZNVmRXV0doWFZrVkthRnBFUmt0amF6RlhZVWQ0VTJKV1NsbFdiVEF4VVcxV1IxZHVVbXRTYlZKd1ZGZHplRTVHVm5ST1ZrNVhZbFZ3ZVZrd2FFTldiVXBIWTBWNFYxWnNjRmhaTVZwUFl6RlNjMVZyTlZkaVNFSllWbXhhYTAxSFJYbFNiR2hVWVRGd1VGWnRNVk5YUmxaeFZHeE9WVkp0ZUZaVk1uUmhZa1paZUZkclpGZGlXR2hZVmtkNFNtVkdUblZpUm1Sb1RWaENXRmRzVm1GWlZtUkhWRzVLYUZKVVZsaFpiR1J2VmxaYVdHVkhSbGRpVmxwSVZqRm9jMVJzV2tkVGJrSlZWbFpLV0ZZd1dsZGtSMVpJVDFad1YyRXpRbGRXVnpBeFZERlplVk5yWkZoaVZWcG9WbTE0ZDFZeGNGWlhiVVpxWVhwV1YxUXhXbXRoVjBWM1lucEtWMkZyY0ROV1JFcEtaVVphY2xwR2FGaFNNbWg0Vmxjd01WRXlSa2RYYmxKc1VsaFNjbGxyWkRSTlJuQldWMnM1VjFKc2JETlpNRlpyVm1zeGNWSllaRnBXVmxZeldsWmFjbVZ0UmtkYVJtUnBVMFZKZVZacVJtRlpWbEY1VkZob1ZHSnJXbGxaYkdRMFZrWndXR1JIUmxoaVJuQlpXa1ZhYTFZeVJqWlNhMmhhVFVaYWRsbFVSazlTYXpWWFZXeGFhVkpyY0RaV1ZFWmhZVEpPYzFkc2JHaFNNbmhVV1d0b1ExZEdXbkZUVkVaWFRWWndlVlJXV210WFIwVjVZVWRvVm1FeFdtaGFWbHAzVWxaT2NtUkdUbWxUUlVwS1YydFdWazFXVW5OYVJWcFVZbGRvV0ZsVVJuZGhSbHBWVTJzMWJGWnJOWHBYYTFwaFlVVXhkV0ZJWkZkV00yaFlXa1JLVDJNeVNrZFdiRkpvWWtWd1ZWWnRNVFJaVm1SSFlrWmFZVkpYVWxsVmJYaHpUa1paZVdWSFJsaGlSbkJaVmtab2IxWXlTa2RqUmtKV1RVZFNXRlZ0ZUZOak1rWklZVWRvVGxORlJYbFdiWGhyVFVac1YxTllhR0ZTVjFKeFZXeGFkMk5XVm5Sa1NHUnFUVmQ0ZWxkcll6VlViRnB6WTBoc1YySlVRVEZaVjNONFZteGtjVkZzWkZkbGJGcFJWakZhVm1ReVZsaFNhMlJUWWtkU2IxbFVSblpsYkZweFUycFNWazFXYkRSV2JUVlhWbGRLV0dWR2FGcGlSbkJNVldwR1lWZEZNVmxhUmxaT1lURlpNVlpYZUc5ak1rcEhVMnhrV0dKR2NGWldiR1JUVmtacmVXVkhSbE5OVm5CYVdWVmFhMVl3TVVsUmEzQlhVbXh3YUZscVJsWmxSazV6V2taa1dGSXlhRmxXUm1SM1Vtc3hSMkpJVWs1V2JWSlZWVzE0WVZkc2EzZFhiVGxvVWxSQ00xVXllRk5YUjBwSVZHcFNXbUpVUmxoV2FrWmhWMWRHUjFwSGFHeGlSbkJTVm14amQyUXdOVlpOU0docVVsWmFWbGxzVW5OV01WWjBaVWhPVDFKdGRETldNalZyVmpGYWMyTkljRlpOYWxZelZqSjRXbVZ0UmtkVmJGcE9WakZLVFZaWE1UUlVNbEpJVld0b2FGSlVWbkJaYkdSdlUwWmFkR1ZIUmxwV01GWTFWV3hvYjFaWFNuSk9WbEphWVRKU2RsWldXbUZrVjA1SFdrWm9WMkpHY0RaV2Fra3hVekZTYzFkdVVsWmhhMHBvVm14a1RtVkdiSEpYYTNSWFZqQndTRmxyV210VWJVcDBZVVJhVjJKSFRqUldha3BUVTBaS2NtSkdaR2xTYmtKUVZtMHhOR1F4VmxkWGJHUldZVEpTY1Zsc1dtRlRSbXh4Vkc1a2FGSnJiRFpXVjNNMVZsWmFkR0ZGVWxkU1ZuQm9WbXBHVjJOc1VuTlVhelZvVFRCSk1sWnRkR3RPUm14WFYyeG9VMWRIVW5GVmFrcHZWbXhhYzFwR1NrNVNiRll6VmpJMWExVXhXbk5UYWtKV1lsaG9kbFpxUm1GU2JHUnpXa1pvVjAweFNuaFhiRlpoWVRGSmVGUnVTbGhpUjFKWVZXeGFkMWRzWkZobFJ6bHBUV3hLV0Zrd1dtRldNVnBIVjJ4c1ZtSlVSbFJhVjNoelkyeHdSVlZzWkU1V1YzY3lWMVpXYjJJeFdYbFNXR2hZWWtaS1YxbHNhRTVsUmxweFUyczVWRlpzU2pCVmJYTXhWRzFLV0dGR1RsZGlWRVl6VldwS1VtVkdjRWxVYkZwcFVqRktXRmRYTVhwTlYwNUhWMjVTVGxack5WUlphMXBoWld4YVdHVkhkRmhpUm13elZtMXdZVmRIU25WUmEyaFhZbGhvYUZSdGVFdGpNVVp6V2taT2FWSnNhM2RXYlRFMFlURk5lRlJyV2s1V2JWSnZWVzF6TVZaR1duUmxSbVJQVW14d2VGVXhhRzlVTVVsM1kwUkNWMkpZVW1oV1ZWcGhaRWRHUjJKR2NHaE5iRVYzVjFod1IxbFhUbk5qUldoUVZqTlNXRmxyV2xwTlJscDBUVmh3VDFac1dqQlZNblJ2VlVaYVJrNVhSbHBXUlZwb1ZrVmFjMVl4V2xsaFIzUlRZa1p3TlZkclZtRlpWbGw0VTJ4YWFsSlhlRmxXYm5CR1RVWmFSVkp0Um1wTlZsb3hWVEo0VTJGV1dsZGpSa0pYVmpOQ1VGbHFSa3RqTVdSeldrWm9hVmRHU25aV1JscFdUVmRXYzFadVRtaFNNMUpYVkZkMGQxWnNXblJsUm1SWFRXdHdTRlpzYUc5V2JGcEdWMjVLV2sxV2NFaGFSbHBUWXpGU2MxUnRhRTVYUlVwb1ZtMXdTMDFHV1hsVldHaFhZbXR3VDFac1duZFhWbXgwWlVkR1YwMVdTbGhXTWpGSFZteEtjMWRzYkdGV1YyaG9XVlJCZUdOdFRrWmFSbVJYVFRKb1RWWnRjRUpsUjAxNFZHNUtiRkp0VWxoWmExWjNVbFphV0dORmRGUk5hekUwVmxjMVQxZEhTa2RYYlRsVlZsZG9SRmxxUm1GU01WcDBaRVU1VTJFelFsbFdiVEUwWVRGc1YxTlljRlppUmxwaFdWUkdZVmRHVWxWU2JHUnJVbFJHUmxWdGVHdFZNa3BKVVd4b1YxSXphRmhXUkVaclUwWktkVk5zVW1saWEwcFlWMVpTUjJReFRrZFhXR1JZWW0xU1ZGUlhkSGRUUmxwSVpVVTVWMDFXY0RCYVJWSlhWakpLV1ZWdGFGZFdSVnBMV2xaYVlXUldWbk5hUjJoT1YwVktVMVp0TVRCWlYxRjRWMjVPV0dKcmNGaFpiVEZUWTFaV2RHVklaR3hpUm5Bd1drVlNRMVpYU2taalJFSlhWak5vZGxZeWVHRldNVnBWVW14a1UwMHlhRTFYYTFwaFVqSk5lVlJyWkZoaGVsWnZXVlJHZDJSc1duRlNiVVphVm1zMU1GWldhRzlaVms1R1YyeG9XbUV5YUVSV01GcFhZekZ3UlZGck9WTmlWa3BhVjJ0V2EwMUdXbkpOVmxwWVlXdEtXRlZxVGxOa2JGcHpXa1ZrVDJKR2NIcFdWM2hoWVZaS2NtTkZhRmRTYlZFd1YxWmtUMVl4Vm5WV2JVWlRZWHBXZGxkc1pEUlRiVlp6VjJ0a1dHSkZOV0ZXYlhoWFRsWlZlVTVWT1ZkU01GWTBWakl4UjFkc1drWlhhazVYVWxad2FGWnFSbXRrUmtweldrZHNVMkpyUmpSV2JYUnJUa1paZUZkWWJGUmhNWEJ4VlcweGIxZEdXblZqUlZwclRWWndlRlZ0TVVkVk1ERlhZMGh3V2xaV2NFUldha3BYWXpGa2MxZHNaR2xYUjJoWVZrWmFZVkp0VmtkalJXeFRZa1Z3Y0ZsWWNGZFdWbHBZVFZSQ1dsWnRVbGhYYTJoTFZqSktkRlZzWkZwWFNFSklWV3BHV21WVk5WZGFSbVJvWld0YVdWWnFTalJSTVZwelYxaHdhRkpGY0doVmExWjNWRVpXZEdWR1pHcE5WVFY2VjJ0Vk1XRldTbGxSYTJoWFlXdGFhRmRXV2xwbFJrNVpZa1pTYVdGNlZsZFhWM1JoWkRGYWMySkdWbEppYlZKdlZXMTRTMVl4WkhKVmJFNVdUVlp3ZWxZeWVHOVhSMFY1VlZoa1YyRXlVa3hWYlhoaFkxWlNjMWR0YkZkU1ZWa3dWbTB4TUZsV2JGZFhia3BQVm14d1ZsbHJaRzlpTVd4VlVXNWtUMkpHY0ZsYVJXUkhWVEF4V0ZWcmJGWk5ibEpvV1ZkNFNtVlhSa2RoUm1Sb1lYcFdNVmRzWkRSWlZsbDRWbTVLYTFJelFrOVdiRnAzVG14a1dHTkZPV2hOYTFwWVZUSjRhMVpIU2taT1ZtaGFWak5TTTFacldsZE9iRXB6V2taa1YyRXhjRFZXTW5Scll6SkdWMU5zVmxkaVIyaFlXVlJLVW1ReFZqWlNiazVYWVhwR1YxbFZaRFJWTVZwelkwWm9WMkpVUWpSV1ZFcFBZekZhV1dKSGVGTldia0o1VmtaYVZrMVZNVmRYV0d4c1VucHNiMVp0ZEhOT1JsWnpZVWQwV0ZJd1ZqUlZNblJUVmxaYVYyTkZlRlpOUm5CTVZqRmFkMU5IVWtkVWJHaFRWbGhDVmxadGRHRldNVmw0WWtab1ZtSkhVbGhXTUdSdlYwWnNXV05JVGxaTlYzaDVWMWh3VjFSck1WaGxTR3hYWWxob1VGWnRNVXRXYlU1SFkwWndWMVl5YUVWV2JUQjRVakpPZEZOcVdsSmlWVnBVVm0wMVExVldXblJOU0doVFRWVndNRlpYZEc5aFZrcHlUbFU1Vm1FeGNHaFpWVnBoWkVVeFNWcEhlRk5XUmxwS1ZsY3dNVk14VW5OVWEyaG9VbXhLWVZscldrdFhSbHB4VW14a2ExSXhXa2RYYTFVeFZHeFplRk5xVWxkV2JVMTRWa1JLUjJNeFRuTldiRTVwVTBWS1dWWkdZekZWTURCNFlrWmFXR0pWV2xoWmJGWnpUbXhzY2xkdE9WZE5WWEJhVlZkd1lWWXhXbk5UYTNoWFlXdGFZVnBXV2xOamJIQklZa1pPYUdWc1dqSldNVnBUVWpKUmVWTllhRmhpYTFwVFdXdGFkMVF4Vm5GU2EyUlBVbXh3U1ZwVlpFZFdNa3BJVld0c1YxWXphRWhXYWtwTFUwWldWVkZzV21sU2JrSllWMnhXYTFJeFNYaFZiazVYWWtkU2NGVnVjRzlPVmxsNFdrUkNWazFXVmpSWGEyaFBWMGRLYzFOdE9WWmlXRkpNVjFaYWMxZEhVa1prUjNocFVqTlJNRll5ZEZka01rVjNUVmhPVkdFeVVtRlVWVnAzVkVaYVNHVkZkRmROYXpWR1ZXMTRhMVl4U2xkalJteFhZVEZLU0ZWcVNrNWxWazVaWTBkR1UwMXVhRlZXYlRFd1pERmFSMWR1VW1wU1dGSlhWRlpWZUU1R1duUmxSbVJXWWxWV05WWlhOVU5YYlVWNVZWaHdWVll6YUZkYVZtUlhVMGRTU0dGR1RrNVRSVXBaVm10a05GVXhSWGhYV0d4VVlrZDRVMWxVUmt0V01WSllUbGM1VlZKc1ducFdNblJyWVRGS1ZWWnNhRnBOUmxWNFdWVmtSbVZIVGtkalJtUm9UVmhDV1ZkV1VrZFZiVlpYVm01S2FGSnNTbTlVVnpGdlpXeGFXR05GT1ZaTmF6VklWakkxVTJKR1RraFZia3BXWWxSR1ZGWXllSEprTVZweFVXeGtUbEpGV2pWV2FrcDNVVEZaZUZOcVdsZGlSa3BZV1ZkMGQxTkdhM2xsUlRscVlYcEdXRll5TVc5aFJURllUMVJhVjAxdVVsUlZha3BPWlZaU2RWUnRjRk5XTVVwdlZsZHdUMVV4WkVkaVNFNW9VbnBzV1ZsclduZFRSbGw1VFZSQ1ZVMVZjSHBWTW5odlZtMUtTR0ZJU2xkaE1sSk1XWHBHVDJSR1NuTmFSMnhYVWxad1ZWWnJXbGRaVjAxNVZHNU9ZVk5HU2xCV2FrNXZWMFpzY21GRlRrOVNiSEI2VjFST2IxUnNTbk5XYWs1VlZteHdjbGxXVlhkbFYwWkhZa1prVGxJeWFFVldhMVpoWXpBMWMxUnVUbFZpV0ZKVVdWaHdWbVZHV2xkWk0yaHBUVlpLZWxaSGRHdFdSMFY2WVVab1YySllhRXhWYTFwWFkxWk9jbVJIY0U1V2EzQTJWbXBLTkZZeVJrWk5WV3hTWWxSc1dGVnRlR0ZqYkZKeVYydDBWMDFXY0hwWGEyUkhWVEF3ZUZOc1dsaFdNMUpZVm1wQmQyVkdXblZWYXpWVFVsWndXbGRXYUhkU01VNVhZa1phVjJGc1NsbFpXSEJIVTFaYVdHUkVVbHBXYTNCNldUQmFiMVl3TVVkV1ZFWlhUVWRTVUZWdGN6RlhSMHBIVkcxc2FFMUhkRE5XYlRGM1VqRlZlRlJ1VWxkaE1sSlpWakJrVTFReFduTlhibVJxWWtaYU1GcEZhR3RoYkVwelUyeHNWVlpzY0ZCV2ExVjRWakZrYzFkc1dsZE5NVXA1VjFaYWExTXhTbkpPVm1SaFVtMVNWRlJVUmt0VVZsbDRWMnhhYkZKck5VbFdiWFJoWVZaS2RGVnVRbGRoTVhCb1ZsWmFhMVl4V25SU2JHaHBWbXh3U2xaVVNqQmlNVkY0VjI1V1VtRjZiR0ZXYWs1VFlVWlplRmR0ZEdwTlZuQXdXa1ZhWVZSc1dYaFRhMnhYWVd0cmVGWnFTa2RqTVU1WlkwWmFhVkpVVmxkV2JYaGhXVlpaZUZWc1pGaGlWVnBZV1d0a1UyVldVWGhYYTNSb1ZteHdXRmt3V205WFIwcEhWMjFvV21GcldtaFpla1pyVjFkS1NHVkdUbGhTYTNCWlZqRmpkMDFXUlhsV2JrNVdZbXMxV1ZsWWNITlhSbXh6Vm0xR1UwMVlRa2RYYTJoUFZtc3hSVkpyV2xkaVZFWklWbXBLUzFaV1JuRlZiRlpvVFd4S1NWZFVTbnBsUms1WVVtdGtWV0pYZUZoVmJYaDNWMVphYzFremFFOVNhMnd6VkZWb2IxbFdUa1pYYkU1YVlsaE5lRmt4V2xkak1WWnlXa1pTYVZKdVFscFdSbHBYWVRGYWNrMVZWbE5pUjJoaFZGVmFTMkZHV25GUldHaHJWakJhU2xZeWVHdFdNVXBaVVdzeFYxWjZRalJWZWtaUFZqRk9kVlZ0YkZOV1JscFdWbGN4TUdReFVsZFhiazVZWWtVMVUxUldWbk5PVmxWNVRsVTVWMVl3Y0VoWk1GcGhWMnhhUmxOcVRscFdWbkJVVm0xNGQxSldWbk5VYkdScFVtNUNXbFpxU2pCaE1ERkhWMnRvVkdFeGNGaFpWM014VmpGc2MxVnJTbXhTYkd3elZqSXhSMVV5U2xaaWVrcFdWak5vTTFsVlZYaFhWa1p4VjJ4a2FHRXhjRzlXYTFKTFZURkplR05GYkZaaVdFSlVWbXRhWVdReFdsaE5SRVpTVFVSV1NGWXhhRzlXYlVWNlVXNU9WbUpZYUhwVVZFWlRWakZhZEZKdGFFNVdXRUphVjFaV1lXTXhaSFJUYkd4V1lUTm9ZVlJWV25kWFJtdDRWMnQwYTFKcmNIbFViRnByWVZaYWNtTkdjRmRoYTFwVVZrUktTbVZXU25OYVJsSnBVak5vZGxaWGVHRlpWbGw0VjI1V2FsSlZOVkJWYlRFMFZqRlplV1ZJWkdsU01IQlhWakowZDFZeFNYcGhTRnBYVmtWYVRGWXhXa2RqTWtwSFdrWk9UazFWY0RWV2JYaFRVakZSZUZOWWFHRlRSbHBZV1d0a1UyTkdXWGRXYTNSV1VtMVNXVnBWWXpWaFYwcFhWMnhvV0dFeGNIWldSM2hyVW1zMVdWSnNjR2hOVmxrd1ZrWlNSMk15VG5OWGJrNVZZa1p3Y0ZWdE1UTk5WbHB6V2tSQ1RsSnNjSHBXTW5SaFZrZEZlV0ZIUmxwaVIyaDJWbFZhWVdSSFZrZFViWEJwVW10dmQxZFhkR0ZVTVZKelZHdGFWR0V6YUZoWmJHaFRZMVp3VmxaVVJsTk5WbkI1VjJ0a2MxUnJNWFZoUmtwWFlsUldNMVpxUm1GV01XUjFWR3hrVjFKV2NGUldSbHByVlRKV1IxWnNhRTlXVkd4WFZGWldkMlZXV1hsbFNFNVlVakJXTkZZeWNFOVdNVmw2VkdwU1ZtSllhSEphUmxwaFl6RmtjazVXWkdsVFJVcFRWbTE0WVZVeFRYaFdibEpYWWtkU1YxbHRlR0ZXTVd4eldrUlNWMVpzV2pCYVZXaHJZa1phYzJOR2FGZFdNMUYzV1ZWVmVHTnJOVlpoUm1ScFVqSm9lVll4V21GVE1XUkhWbTVLVUZac2NHOVpWRUoyWlZaYVIxZHRSbGROVjFKSFZGWmFjMVpYU2xoaFJUbFhZV3RhVEZVeWVHdGpNVnB6Vkd4a1RsWXphRmxXVkVreFZUSkdSMU5zYUZaaVZWcFlXV3hvYjFsV2NFVlNiVVpZVWxSR1Yxa3daRFJXTWtweVUydG9XRlpGU21oVmVrWlRZekZPYzFwSGNGTlNWbkJaVm0xMFYxbFdaRWRYYTFaVFlUSlNjVlJYZEhOT2JHUnlXa2hPVmsxV2NIbFpNRnBUVmpKS1dWRnJlRmRXUlZwUFdsVmFZV014V25OVGJXaE9UVlZ3VWxZeFpEQmlNVVY0V2tWa2FWSnNjRmhXYTFaaFlqRlNWMWR1WkU1V2JGcFpXbFZvYTFkSFNrZGpSbXhhVmxaYVZGWXllR0ZTYkdSeVdrZEdWMkpJUVhwV1ZFWmhaREZKZUZSdVNrOVdNbmhZV1ZSS00wMVdXblJqUlhSclRWVldOVlpHYUc5V1IwVjVWV3hTV21FeVVuWlpWVnBYWTFaR2RGSnNhRmRpUm5BMFZsUkpkMDVYU2tkVGJrNXBVa1phYUZac1pFNU5WbHBZWXpOb1UxWnJjSGxYYTFwWFZHeFpkMDFVVWxoV2JIQlhXbFZrVTFJeFduVlRiWFJUWWtoQ1dWWlhlRmRrTVU1WFdrWm9UbFpHU2xaVVZscDNaV3hhV0U1VmRGZFNNSEJYVmpKek5WWnRSbkpPV0ZwV1RXNW9jbFpxUm1Ga1IxSkdUMVpPVGxKdVFscFdiWFJyVFVac1YxWlliRlJpYXpWeFZXMTRZVlpzV25SbFIwWlhUVlpLZWxZeWVHdFZNREZYVTI1c1drMUhVak5XVkVaclVqRk9jMVZzWkZkV2JrSlVWMnRTUzFJeFduUlZhMlJXWWxkb2MxbFhkRXRrTVZZMlVtczVhbUpGU2xWVk1XaERWRVpXVlUxRWJFcGhWM1IzU1dscmNDSXBLUT09Iikp"))"))